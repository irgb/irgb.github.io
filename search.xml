<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title></title>
      <url>https://irgb.github.io/%E5%88%A9%E7%94%A8%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E4%BC%A0%E8%BE%93%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>在网络上传输文件时, 如果使用对称加密, 那么密钥的就必须以明文传输, 这就失去了加密的意义.<br>而用 RSA 等非对称加密算法加密大文件会比较慢.<br>更好的方法是, 生成一个对称密钥(key), 用这个 key 去加密文件, 然后用对方的私钥去加密key. 对方收到文件之后, 用自己的私钥解密 key, 然后再用 key 解密文件.</p>
<p><strong>准备工作</strong>:</p>
<ol>
<li><p>收发双方都要生成一对公私钥:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "foo@example.com"</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成适合发布的 pkcs8 格式的公钥:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -e -f ~/.ssh/id_rsa.pub -m PKCS8 &gt; ~/.ssh/id_rsa.pub.pkcs8</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>发送方 (加密)</strong>:<br>首先获取对方的 pkcs8 格式的公钥(明文传输). 保存到文件 <code>someone.pub.pkcs8</code>.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 生成256字节的随机密钥, 并保存到文件 key</span><br><span class="line">openssl rand 256 -out key</span><br><span class="line"><span class="meta">#</span> 用 aes 对称加密方法加密文件 file_name, 加密后的文件为 file_name.enc</span><br><span class="line">openssl aes-256-cbc -in file_name -out file_name.enc -pass file:key</span><br><span class="line"><span class="meta">#</span> 用对方公钥加密 key 文件</span><br><span class="line">openssl rsautl -encrypt -pubin -inkey ~/.ssh/someone.pub.pkcs8 -in key -out key.enc</span><br><span class="line"><span class="meta">#</span> 将加密后的 key 和 文件一起打包之后发送给对方</span><br><span class="line">tar -zcvf secret.tgz *.enc</span><br></pre></td></tr></table></figure></p>
<p><strong>接收方(解密)</strong>:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 解压压缩包</span><br><span class="line">tar -xzvf secret.tgz</span><br><span class="line"><span class="meta">#</span> 用私钥解密 key.enc, 获取 key</span><br><span class="line">openssl rsautl -decrypt -ssl -inkey ~/.ssh/id_rsa -in key.enc -out key</span><br><span class="line"><span class="meta">#</span> 用 key 解密文件</span><br><span class="line">openssl aes-256-cbc -d -in file_name.enc -out file_name -pass file:key</span><br></pre></td></tr></table></figure></p>
<p>mac os 和 linux 都可以用以上命令.</p>
<p><strong>参考资料</strong><br><a href="https://gist.github.com/colinstein/de1755d2d7fbe27a0f1e" target="_blank" rel="noopener">Encrypt/Decrypt a File using your SSH Public/Private Key on Mac OS X</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Hash]]></title>
      <url>https://irgb.github.io/C++/hash/</url>
      <content type="html"><![CDATA[<h3 id="hash-函数"><a href="#hash-函数" class="headerlink" title="hash 函数"></a>hash 函数</h3><p>比较常用的是 <a href="https://github.com/aappleby/smhasher/wiki/MurmurHash3" target="_blank" rel="noopener">murmurhash3</a> :<br><strong>murmurhash3.h</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MURMURHASH3_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MURMURHASH3_H_</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Referenec: https://github.com/goossaert/hashmap</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">murmurhash3_x64_128</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* key, <span class="keyword">int</span> len, <span class="keyword">uint32_t</span> seed, <span class="keyword">void</span> * out)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MURMURHASH3_H_</span></span></span><br></pre></td></tr></table></figure></p>
<p><strong>murmurhash3.cpp</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"murmurhash3.hpp"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FORCE_INLINE inline __attribute__((always_inline))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> uint64_t <span class="title">rotl64</span> <span class="params">(<span class="keyword">uint64_t</span> x, <span class="keyword">int8_t</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x &lt;&lt; r) | (x &gt;&gt; (<span class="number">64</span> - r));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROTL64(x, y) rotl64(x, y)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BIG_CONSTANT(x) (x##LLU)</span></span><br><span class="line"></span><br><span class="line"><span class="function">FORCE_INLINE uint64_t <span class="title">getblock64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> * p, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FORCE_INLINE uint64_t <span class="title">fmix64</span> <span class="params">(<span class="keyword">uint64_t</span> k)</span> </span>&#123;</span><br><span class="line">    k ^= k &gt;&gt; <span class="number">33</span>;</span><br><span class="line">    k *= BIG_CONSTANT(<span class="number">0xff51afd7ed558ccd</span>);</span><br><span class="line">    k ^= k &gt;&gt; <span class="number">33</span>;</span><br><span class="line">    k *= BIG_CONSTANT(<span class="number">0xc4ceb9fe1a85ec53</span>);</span><br><span class="line">    k ^= k &gt;&gt; <span class="number">33</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">murmurhash3_x64_128</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> * key, <span class="keyword">const</span> <span class="keyword">int</span> len,</span></span></span><br><span class="line"><span class="function"><span class="params">		<span class="keyword">const</span> <span class="keyword">uint32_t</span> seed, <span class="keyword">void</span> * out)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">uint8_t</span> * data = (<span class="keyword">const</span> <span class="keyword">uint8_t</span>*)key;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> nblocks = len / <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint64_t</span> h1 = seed;</span><br><span class="line">    <span class="keyword">uint64_t</span> h2 = seed;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">uint64_t</span> c1 = BIG_CONSTANT(<span class="number">0x87c37b91114253d5</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">uint64_t</span> c2 = BIG_CONSTANT(<span class="number">0x4cf5ad432745937f</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// body</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">uint64_t</span> * blocks = (<span class="keyword">const</span> <span class="keyword">uint64_t</span> *)(data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; nblocks; i++) &#123;</span><br><span class="line">        <span class="keyword">uint64_t</span> k1 = getblock64(blocks,i*<span class="number">2</span>+<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">uint64_t</span> k2 = getblock64(blocks,i*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">        k1 *= c1; k1    = ROTL64(k1,<span class="number">31</span>); k1 *= c2; h1 ^= k1;</span><br><span class="line">        h1 = ROTL64(h1,<span class="number">27</span>); h1 += h2; h1 = h1*<span class="number">5</span>+<span class="number">0x52dce729</span>;</span><br><span class="line">        k2 *= c2; k2    = ROTL64(k2,<span class="number">33</span>); k2 *= c1; h2 ^= k2;</span><br><span class="line">        h2 = ROTL64(h2,<span class="number">31</span>); h2 += h1; h2 = h2*<span class="number">5</span>+<span class="number">0x38495ab5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// tail</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">uint8_t</span> * tail = (<span class="keyword">const</span> <span class="keyword">uint8_t</span>*)(data + nblocks*<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint64_t</span> k1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">uint64_t</span> k2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (len &amp; <span class="number">15</span>) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">15</span>: k2 ^= ((<span class="keyword">uint64_t</span>)tail[<span class="number">14</span>]) &lt;&lt; <span class="number">48</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">14</span>: k2 ^= ((<span class="keyword">uint64_t</span>)tail[<span class="number">13</span>]) &lt;&lt; <span class="number">40</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">13</span>: k2 ^= ((<span class="keyword">uint64_t</span>)tail[<span class="number">12</span>]) &lt;&lt; <span class="number">32</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">12</span>: k2 ^= ((<span class="keyword">uint64_t</span>)tail[<span class="number">11</span>]) &lt;&lt; <span class="number">24</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">11</span>: k2 ^= ((<span class="keyword">uint64_t</span>)tail[<span class="number">10</span>]) &lt;&lt; <span class="number">16</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">10</span>: k2 ^= ((<span class="keyword">uint64_t</span>)tail[ <span class="number">9</span>]) &lt;&lt; <span class="number">8</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">9</span> : k2 ^= ((<span class="keyword">uint64_t</span>)tail[ <span class="number">8</span>]) &lt;&lt; <span class="number">0</span>;</span><br><span class="line">				 k2 *= c2; k2 = ROTL64(k2,<span class="number">33</span>); k2 *= c1; h2 ^= k2;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">case</span> <span class="number">8</span>: k1 ^= ((<span class="keyword">uint64_t</span>)tail[ <span class="number">7</span>]) &lt;&lt; <span class="number">56</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">7</span>: k1 ^= ((<span class="keyword">uint64_t</span>)tail[ <span class="number">6</span>]) &lt;&lt; <span class="number">48</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">6</span>: k1 ^= ((<span class="keyword">uint64_t</span>)tail[ <span class="number">5</span>]) &lt;&lt; <span class="number">40</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>: k1 ^= ((<span class="keyword">uint64_t</span>)tail[ <span class="number">4</span>]) &lt;&lt; <span class="number">32</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>: k1 ^= ((<span class="keyword">uint64_t</span>)tail[ <span class="number">3</span>]) &lt;&lt; <span class="number">24</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>: k1 ^= ((<span class="keyword">uint64_t</span>)tail[ <span class="number">2</span>]) &lt;&lt; <span class="number">16</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>: k1 ^= ((<span class="keyword">uint64_t</span>)tail[ <span class="number">1</span>]) &lt;&lt; <span class="number">8</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>: k1 ^= ((<span class="keyword">uint64_t</span>)tail[ <span class="number">0</span>]) &lt;&lt; <span class="number">0</span>;</span><br><span class="line">				 k1 *= c1; k1 = ROTL64(k1,<span class="number">31</span>); k1 *= c2; h1 ^= k1;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//----------</span></span><br><span class="line">    <span class="comment">// finalization</span></span><br><span class="line"></span><br><span class="line">    h1 ^= len; h2 ^= len;</span><br><span class="line"></span><br><span class="line">    h1 += h2;</span><br><span class="line">    h2 += h1;</span><br><span class="line"></span><br><span class="line">    h1 = fmix64(h1);</span><br><span class="line">    h2 = fmix64(h2);</span><br><span class="line"></span><br><span class="line">    h1 += h2;</span><br><span class="line">    h2 += h1;</span><br><span class="line"></span><br><span class="line">    ((<span class="keyword">uint64_t</span>*)out)[<span class="number">0</span>] = h1;</span><br><span class="line">    ((<span class="keyword">uint64_t</span>*)out)[<span class="number">1</span>] = h2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>调用方法</strong>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> out[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">uint64_t</span> key = <span class="number">98723849823</span>;</span><br><span class="line">murmurhash3_x64_128((<span class="keyword">void</span>*)(&amp;key), <span class="keyword">sizeof</span>(key), <span class="number">0</span>, out);</span><br><span class="line"><span class="keyword">uint64_t</span> hashcode = *((<span class="keyword">uint64_t</span>*) out) ^ *((<span class="keyword">uint64_t</span>*) (out + <span class="number">8</span>));<span class="comment">// xor 不改变随机数分布</span></span><br></pre></td></tr></table></figure></p>
<h3 id="hash-表冲突解决策略"><a href="#hash-表冲突解决策略" class="headerlink" title="hash 表冲突解决策略:"></a>hash 表冲突解决策略:</h3><p>比较常用的是 robin hood hashing:<br><strong>robin_hood_hash.hpp</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ROBIN_HOOD_HASHTABLE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROBIN_HOOD_HASHTABLE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> likely(x) __builtin_expect(!!(x), 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> unlikely(x) __builtin_expect(!!(x), 0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据具体场景优化定制的的 robin hood hashtable, 通用型不强.</span></span><br><span class="line"><span class="comment">// key 的类型为 uint64_t, 即 winfoid 的类型, value 的类型为 uint32_t.</span></span><br><span class="line"><span class="comment">// 只支持插入和查找, 不支持删除, 不支持自动扩容.</span></span><br><span class="line"><span class="comment">// 使用时需要用户自己指定 capacity, 这个 capacity 决定了最终的 load factor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint64_t</span> K;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span> V;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RobinHoodHashtable</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Item</span> &#123;</span></span><br><span class="line">        K key;</span><br><span class="line">        V value;</span><br><span class="line">        Item() : key(<span class="number">0</span>), value(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">        Item(K k, V v) : key(k), value(v) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    RobinHoodHashtable(): _capacity(<span class="number">0</span>), _item_num(<span class="number">0</span>), _buffer(<span class="literal">nullptr</span>), _probing_num(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    ~RobinHoodHashtable() &#123;</span><br><span class="line">        <span class="keyword">if</span> (_buffer != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _buffer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (_probing_num != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] _probing_num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 hashtable, 设置 capacity</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">init</span><span class="params">(<span class="keyword">uint32_t</span> capacity)</span> </span>&#123;</span><br><span class="line">        _capacity = capacity;</span><br><span class="line">        _buffer = <span class="keyword">new</span> (<span class="built_in">std</span>::nothrow) Item[_capacity];</span><br><span class="line">        <span class="keyword">if</span> (_buffer == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"new buffer array failed."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        _probing_num = <span class="keyword">new</span> (<span class="built_in">std</span>::nothrow) <span class="keyword">int32_t</span>[_capacity];</span><br><span class="line">        <span class="keyword">if</span> (_probing_num == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"new probing_num array failed."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::fill_n(_probing_num, _capacity, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">insert</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (_item_num &gt;= _capacity) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"you need to increase capacity"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">uint32_t</span> pos = _key_to_pos(key);</span><br><span class="line">        <span class="keyword">uint32_t</span> probing_count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果 pos 未被占用就放在这个位置</span></span><br><span class="line">            <span class="keyword">if</span> (_probing_num[pos] == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">new</span> (_buffer + pos) Item(key, value);</span><br><span class="line">                _probing_num[pos] = probing_count;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 相同的 key 就覆盖 value</span></span><br><span class="line">            <span class="keyword">if</span> (key == _buffer[pos].key) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 否则继续探测下一个位置</span></span><br><span class="line">            <span class="keyword">uint32_t</span> cur_probing_count = _probing_num[pos];</span><br><span class="line">            <span class="keyword">if</span> (probing_count &gt; cur_probing_count) &#123;</span><br><span class="line">                <span class="built_in">std</span>::swap(key, _buffer[pos].key);</span><br><span class="line">                <span class="built_in">std</span>::swap(value, _buffer[pos].value);</span><br><span class="line">                _probing_num[pos] = probing_count;</span><br><span class="line">                probing_count = cur_probing_count;</span><br><span class="line">            &#125;</span><br><span class="line">            pos = ++pos &gt;= _capacity ? pos % _capacity : pos;</span><br><span class="line">            ++probing_count;</span><br><span class="line">        &#125;</span><br><span class="line">        ++_item_num;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据 key 查找, 如果找到返回 &lt;true, value&gt;, 没有找到返回&lt;false, 0&gt;</span></span><br><span class="line">    __attribute__((always_inline)) <span class="built_in">std</span>::pair&lt;<span class="keyword">bool</span>, V&gt; find(<span class="keyword">const</span> K&amp; key) &#123;</span><br><span class="line">        <span class="keyword">uint32_t</span> pos = _key_to_pos(key);</span><br><span class="line">        <span class="keyword">uint32_t</span> probing_count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (_probing_num[pos] == <span class="number">-1</span> || probing_count &gt; _probing_num[pos]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">std</span>::make_pair(<span class="literal">false</span>, <span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_buffer[pos].key == key) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">std</span>::make_pair(<span class="literal">true</span>, _buffer[pos].value);</span><br><span class="line">            &#125;</span><br><span class="line">            pos = ++pos &gt;= _capacity ? pos % _capacity : pos;</span><br><span class="line">            ++probing_count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">uint32_t</span> _item_num;</span><br><span class="line">    <span class="keyword">uint32_t</span> _capacity;</span><br><span class="line">    <span class="comment">// 存储 k-v 对的缓冲区</span></span><br><span class="line">    Item * _buffer;</span><br><span class="line">    <span class="comment">// 记录一个元素的探测长度, -1 表示当前位置没有元素</span></span><br><span class="line">    <span class="keyword">int32_t</span>* _probing_num;</span><br><span class="line">    <span class="comment">// 将 key 转换为pos, 通常可以通过murmurhash3_x64_128(key) 计算 hashcode, 然后在计算 pos, 但实验发现 murmurhash3_x64_128 本身也比较耗时, 直接对 key 进行取余效率更高. 但这种情况只适合数据分布比较均匀的情况, 否则有可能出现insert 和 find 冲突大大增加的情况.</span></span><br><span class="line">    __attribute__((always_inline)) <span class="keyword">uint32_t</span> _key_to_pos(<span class="keyword">const</span> K&amp; key) &#123;</span><br><span class="line">        <span class="keyword">uint32_t</span>* p = (<span class="keyword">uint32_t</span>*) &amp;key;</span><br><span class="line">        <span class="keyword">uint32_t</span> hashcode = *p ^ *(p+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">uint32_t</span> pos = hashcode &gt;= _capacity ? hashcode % _capacity : hashcode;</span><br><span class="line">        <span class="keyword">return</span> pos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// ROBIN_HOOD_HASHTABLE_H_</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="https://www.sebastiansylvan.com/post/robin-hood-hashing-should-be-your-default-hash-table-implementation/" target="_blank" rel="noopener">Robin Hood Hashing should be your default Hash Table implementation</a></li>
<li><a href="http://www.idryman.org/blog/2017/05/03/writing-a-damn-fast-hash-table-with-tiny-memory-footprints/" target="_blank" rel="noopener">Writing a Damn Fast Hash Table With Tiny Memory Footprints</a></li>
<li><a href="http://codecapsule.com/2013/11/11/robin-hood-hashing/" target="_blank" rel="noopener">Robin Hood hashing</a></li>
<li><a href="https://tessil.github.io/2016/08/29/benchmark-hopscotch-map.html" target="_blank" rel="noopener">Benchmark of major hash maps implementations</a></li>
<li><a href="https://probablydance.com/2017/02/26/i-wrote-the-fastest-hashtable/" target="_blank" rel="noopener">I Wrote The Fastest Hashtable</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> algorithm hash </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重写库函数或系统调用]]></title>
      <url>https://irgb.github.io/%E5%A6%82%E4%BD%95%E9%87%8D%E5%86%99%E5%BA%93%E5%87%BD%E6%95%B0%E6%88%96%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>在 Linux 上用C/C++ 编程时, 当调用标准库函数, 如 read, write, printf, malloc, realloc 时, 程序会先链接 glibc 中的 read, write, printf, malloc, realloc, 然后发起系统调用(read, write, puts, brk, mmap等). 那么如何重写(又称为 hook)这些库函数呢?</p>
<p>对于下面的测试程序, 要把其中的 malloc, free, new, delete 替换成自定义的 malloc, free.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> len = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">char</span> * buf = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(len);</span><br><span class="line">    <span class="built_in">snprintf</span>(buf,len - <span class="number">1</span>, <span class="string">"hello world"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, buf);</span><br><span class="line">    <span class="built_in">free</span>(buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> _i;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> i) : _i(i) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_i</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> len = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">char</span> * buf = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(len);</span><br><span class="line">    <span class="built_in">snprintf</span>(buf,len - <span class="number">1</span>, <span class="string">"hello world"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, buf);</span><br><span class="line">    <span class="built_in">free</span>(buf);</span><br><span class="line">    A* ap = <span class="keyword">new</span> A(<span class="number">123</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ap-&gt;get_i() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">delete</span> ap;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>共有以下几种方法:</p>
<h3 id="通过-LD-PRELOAD-环境变量预先加载动态库"><a href="#通过-LD-PRELOAD-环境变量预先加载动态库" class="headerlink" title="通过 LD_PRELOAD 环境变量预先加载动态库"></a>通过 LD_PRELOAD 环境变量预先加载动态库</h3><p>在<code>malloc_preload.c</code> 中自定义 malloc 和 free 函数, 其中分别调用了标准库中的 <a href="https://linux.die.net/man/3/malloc" target="_blank" rel="noopener">malloc</a> 和 free.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// malloc_preload.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> * (*real_malloc)(<span class="keyword">size_t</span> size) = <span class="literal">NULL</span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">void</span> <span class="params">(*real_free)</span><span class="params">(<span class="keyword">void</span> *ptr)</span> </span>= <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">malloc</span><span class="params">(<span class="keyword">size_t</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"my malloc: %zu\n"</span>, size);</span><br><span class="line">    <span class="comment">// use dlsym to find next malloc in dynamic libraries, ie. malloc in std library</span></span><br><span class="line">    real_malloc = dlsym(RTLD_NEXT, <span class="string">"malloc"</span>);</span><br><span class="line">    <span class="keyword">return</span> real_malloc(size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free</span><span class="params">(<span class="keyword">void</span> *ptr)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"my free: %p\n"</span>, ptr);</span><br><span class="line">    real_free = dlsym(RTLD_NEXT, <span class="string">"free"</span>);</span><br><span class="line">    real_free(ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>把<code>malloc_preload.c</code> 编译成动态库:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 当编译动态库时, 要加上 -fPIC 参数, 以生成位置无关代码.</span><br><span class="line">gcc -fPIC -shared -o libmalloc_preload.so ./malloc_preload.c -ldl</span><br></pre></td></tr></table></figure></p>
<p>把<code>main.c</code> 编译成可执行文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc main.c -o main</span><br></pre></td></tr></table></figure></p>
<p>需要注意的是, 如果 main 可执行文件已经存在, 不需要重编. 因为在执行时, 操作系统会动态链接到<code>libmalloc_preload.so</code> 中的 <code>malloc</code>.<br>执行main 的同时, 设置环境变量:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LD_PRELOAD="./libmalloc_preload.so" ./main</span><br></pre></td></tr></table></figure></p>
<p>可以看到, 标准库中的 malloc 和 free 被 hook 了.</p>
<h3 id="使用-wrap-编译参数"><a href="#使用-wrap-编译参数" class="headerlink" title="使用 wrap 编译参数"></a>使用 wrap 编译参数</h3><ol>
<li>给自定义的 malloc 和 free 函数加上<code>__wrap_</code>前缀, 如果需要调用标准库中的 malloc, free, 就加上<code>__real_</code> 前缀. </li>
<li>编译时加上参数 <code>-Wl,-wrap=malloc -Wl,-wrap=free</code> 参数. 这样编译器就会自动把用户代码中的 malloc 链接到<code>__wrap_malloc</code>, 并把<code>__real_malloc</code> 链接到glibc 中的<code>malloc</code>. free 也是一样.</li>
</ol>
<p>在<code>malloc_wrap.c</code> 文件中自定义 malloc 和 free 函数:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// malloc_wrap.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> * __real_malloc(<span class="keyword">size_t</span> size);</span><br><span class="line"><span class="keyword">void</span> __real_free(<span class="keyword">void</span> *ptr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> * __wrap_malloc(<span class="keyword">size_t</span> size) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"my malloc: %zu\n"</span>, size);</span><br><span class="line">    <span class="keyword">return</span> __real_malloc(size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __wrap_free(<span class="keyword">void</span> *ptr) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"my free: %p\n"</span>, ptr);</span><br><span class="line">    __real_free(ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>重新编译主程序:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -g main.c malloc_wrap.c -o main -Wl,-wrap=malloc -Wl,-wrap=free</span><br></pre></td></tr></table></figure></p>
<p>也可以把<code>malloc_wrap.c</code> 编译成静态库, 在编译 main.c 的时候链接:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc -c malloc_wrap.c</span><br><span class="line">ar cr libmalloc_wrap.a malloc_wrap.o</span><br><span class="line">gcc -g main.c malloc_wrap.c -o main -Wl,-wrap=malloc -Wl,-wrap=free</span><br><span class="line">gcc main.c -L./ -lmalloc_wrap -o main -Wl,-wrap=malloc -Wl,-wrap=free</span><br></pre></td></tr></table></figure></p>
<p>运行 main, 即可看到库函数 malloc 和 free 都被hook了.</p>
<hr>
<p>如果主程序是C++程序, 需要在函数前加上<code>extern &quot;C&quot;</code>, 如下:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="keyword">void</span> * __real_malloc(<span class="keyword">size_t</span> size);</span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="keyword">void</span> __real_free(<span class="keyword">void</span> *ptr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="keyword">void</span> * __wrap_malloc(<span class="keyword">size_t</span> size) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"my malloc: %zu\n"</span>, size);</span><br><span class="line">    <span class="keyword">return</span> __real_malloc(size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="keyword">void</span> __wrap_free(<span class="keyword">void</span> *ptr) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"my free: %p\n"</span>, ptr);</span><br><span class="line">    __real_free(ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>因为C++程序在编译之后函数名会经过 mangle 处理, 所以需要加上<code>extern &quot;C&quot;</code> 告诉编译器这是 c 风格的代码, 不要 mangle.<br>用命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ main.cpp malloc_wrap.cpp -o main -Wl,-wrap=malloc -Wl,-wrap=free</span><br></pre></td></tr></table></figure></p>
<p>编译之后同样可以看到</p>
<h3 id="glibc-调试变量"><a href="#glibc-调试变量" class="headerlink" title="glibc 调试变量"></a>glibc 调试变量</h3><p>这种方法不常用, 详情参考 <a href="http://blog.sina.com.cn/s/blog_6f5b220601012x32.html" target="_blank" rel="noopener">malloc调试变量</a></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h3><ul>
<li><a href="https://danluu.com/malloc-tutorial/" target="_blank" rel="noopener">A quick tutorial on implementing and debugging malloc, free, calloc, and realloc</a></li>
<li><a href="https://manybutfinite.com/post/anatomy-of-a-program-in-memory/" target="_blank" rel="noopener">Anatomy of a Program in Memory</a></li>
<li><a href="http://goog-perftools.sourceforge.net/doc/tcmalloc.html" target="_blank" rel="noopener">TCMalloc : Thread-Caching Malloc</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> c++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c++ </tag>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++ 线程优雅退出]]></title>
      <url>https://irgb.github.io/C++%E7%BA%BF%E7%A8%8B%E4%BC%98%E9%9B%85%E9%80%80%E5%87%BA/</url>
      <content type="html"><![CDATA[<h3 id="C-线程如何优雅退出-执行清理操作"><a href="#C-线程如何优雅退出-执行清理操作" class="headerlink" title="C++ 线程如何优雅退出(执行清理操作)"></a>C++ 线程如何优雅退出(执行清理操作)</h3><p>多线程程序中, 经常会定时执行任务. 通常的做法是, 在 while 循环中执行一个 task, 然后 sleep 一段时间. 如下:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> is_stopped = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nanotask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">interval</span>;</span></span><br><span class="line">    interval.tv_sec = <span class="number">10</span>;</span><br><span class="line">    interval.tv_nsec = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!is_stopped) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"nanosleeping"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        nanosleep(&amp;interval, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"wake up"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">task</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!is_stopped) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"sleeping"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="comment">// sleep 底层实现还是 nanosleep</span></span><br><span class="line">        sleep(<span class="number">10</span>);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"wake up"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"cleanup"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handler</span><span class="params">(<span class="keyword">int</span> sig)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"got signal:"</span> &lt;&lt; sig &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 虽然设置了is_stopped = true, 但是要等到 sleep 返回, 程序才能结束</span></span><br><span class="line">    is_stopped = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 谨慎使用 signal, 尽量使用 sigaction</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">sa</span>;</span></span><br><span class="line">    sa.sa_handler = handler;</span><br><span class="line">    sigemptyset(&amp;sa.sa_mask);</span><br><span class="line">    sa.sa_flags = <span class="number">0</span>;</span><br><span class="line">    sigaction(SIGTERM, &amp;sa, <span class="literal">NULL</span>);</span><br><span class="line">    sigaction(SIGINT, &amp;sa, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="function">thread <span class="title">t1</span><span class="params">(task)</span></span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="function">thread <span class="title">t2</span><span class="params">(nanotask)</span></span>;</span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"thread exit"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这段程序用 sleep 或 nanosleep 作为时间间隔, 并监听 SIGINT(ctrl + c) 和 SIGTERM(kill <pid>) 两个信号. 但有以下几个问题:</pid></p>
<ol>
<li>sleep 和 nanosleep 无法被唤醒, 所以程序再接收到 SIGINT 或 SIGTERM 之后必须等待sleep 正常返回才能执行后面的 cleanup 代码. </li>
<li>如果不监听 SIGINT 或 SIGTERM, 那么系统会执行默认的 handler, 并终止程序, 这会 interrupt sleep 函数, 但也会导致 cleanup 代码被跳过.</li>
<li>sleep 是linux 系统调用(包含在 unistd.h 中), 其实现与平台相关的, 所以可移植性不好. 所以有些实现是<a href="https://stackoverflow.com/a/3125701/5432806" target="_blank" rel="noopener">用可移植的 select 函数代替 sleep</a>. 但这同样会面临<a href="https://stackoverflow.com/a/264378/5432806" target="_blank" rel="noopener">无法被唤醒的问题</a>.</li>
</ol>
<hr>
<p><strong>更好的实现方式是利用C++11 中的 mutex 和 condition_variable</strong>. 利用condition_variable::wait_for 实现可 interruptible 的 sleep 功能. 正常情况下 wait_for 超时, 接收到退出信号之后, 程序会立即被唤醒, 退出 while 循环, 并执行 cleanup 代码.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterruptibleSleeper</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// returns false if killed:</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> P&gt;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">wait_for</span><span class="params">(<span class="built_in">std</span>::chrono::duration&lt;R, P&gt; <span class="keyword">const</span>&amp; time )</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; lock(m);</span><br><span class="line">        <span class="keyword">return</span> !cv.wait_for(lock, time, [&amp;]&#123;<span class="keyword">return</span> terminate;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">interrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; lock(m);</span><br><span class="line">        terminate = <span class="literal">true</span>;</span><br><span class="line">        cv.notify_all();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::condition_variable cv;</span><br><span class="line">    <span class="built_in">std</span>::mutex m;</span><br><span class="line">    <span class="keyword">bool</span> terminate = <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">InterruptibleSleeper sleeper;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">task</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(sleeper.wait_for(<span class="built_in">std</span>::chrono::milliseconds(<span class="number">30000</span>))) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"working"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"cleanup"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handler</span><span class="params">(<span class="keyword">int</span> sig)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"got signal:"</span> &lt;&lt; sig &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 执行 interrupt 之后, 休眠中的线程会被唤醒, 并执行 cleanup 操作</span></span><br><span class="line">	sleeper.interrupt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 谨慎使用 signal, 尽量使用 sigaction</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">sa</span>;</span></span><br><span class="line">    sa.sa_handler = handler;</span><br><span class="line">    sigemptyset(&amp;sa.sa_mask);</span><br><span class="line">    sa.sa_flags = <span class="number">0</span>;</span><br><span class="line">    sigaction(SIGTERM, &amp;sa, <span class="literal">NULL</span>);</span><br><span class="line">    sigaction(SIGINT, &amp;sa, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="function">thread <span class="title">t</span><span class="params">(task)</span></span>;</span><br><span class="line">    t.join();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"thread exit"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Reference :</strong></p>
<ul>
<li><a href="https://stackoverflow.com/questions/29775153/stopping-long-sleep-threads" target="_blank" rel="noopener">stopping long sleep threads</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql 常用命令]]></title>
      <url>https://irgb.github.io/mysql%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>修改编码: <code>alter database mydb character set utf-8;</code><br>查看数据库的默认编码： <code>show variables like &#39;collation_%&#39;;</code> 和 <code>show variables like &#39;character\_set\_%&#39;;</code> 或者 <code>status</code><br>windows上修改默认字符集:<br>把文件<code>my-default.ini</code> 拷贝为 <code>my.ini</code> 并添加以下选项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">default-character-set=utf8</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure></p>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> dbname <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br></pre></td></tr></table></figure>
<h3 id="操作表"><a href="#操作表" class="headerlink" title="操作表"></a>操作表</h3><p>查看表的模式: <code>describe tablename;</code> 或 <code>desc tablename;</code><br>创建表:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> usertable(USER_ID <span class="built_in">VARCHAR</span> (<span class="number">255</span>) PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">FIELD1 <span class="built_in">TEXT</span>, FIELD2 <span class="built_in">TEXT</span>);</span><br></pre></td></tr></table></figure></p>
<p>修改表的模式：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">MODIFY</span> column_name <span class="built_in">VARCHAR</span>(<span class="number">255</span>);</span><br></pre></td></tr></table></figure></p>
<p>删除表:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> usertable;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> usertable;</span><br></pre></td></tr></table></figure></p>
<p>清空表:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> usertable;</span><br></pre></td></tr></table></figure></p>
<h3 id="用户与权限"><a href="#用户与权限" class="headerlink" title="用户与权限"></a>用户与权限</h3><p>创建新用户:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mysql.user(Host,<span class="keyword">User</span>,<span class="keyword">Password</span>) <span class="keyword">values</span>(<span class="string">'localhost'</span>,<span class="string">'username'</span>,<span class="keyword">password</span>(<span class="string">'1234'</span>));</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure></p>
<p>查看所有用户：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>,host,<span class="keyword">password</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure></p>
<p>修改密码:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">SET</span> <span class="keyword">password</span>=<span class="keyword">PASSWORD</span>(<span class="string">'123456'</span>) <span class="keyword">WHERE</span> <span class="keyword">user</span>=<span class="string">'root'</span>;</span><br></pre></td></tr></table></figure></p>
<p>用户授权:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">privileges</span> <span class="keyword">ON</span> databasename.* <span class="keyword">TO</span> username@<span class="string">"%"</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">"password"</span>;</span><br><span class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">privileges</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> root@<span class="string">"%"</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">"password"</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br><span class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">privileges</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> root@<span class="string">"localhost"</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">"password"</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br><span class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">privileges</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> root@<span class="string">"127.0.0.1"</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">"password"</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br></pre></td></tr></table></figure></p>
<p>重新加载权限：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure></p>
<p>允许远程访问:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注释掉本机绑定, 修改/etc/mysql/my.cnf，把其中的 bind-address = 127.0.0.1 注释掉</span><br></pre></td></tr></table></figure></p>
<h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><p>查看数据文件存放位置: <code>show variables like &#39;datadir&#39;</code><br><a href="http://stackoverflow.com/questions/6682916/how-to-take-backup-of-a-single-table-in-the-mysql-database" target="_blank" rel="noopener">数据备份与导出</a>：<br><code>mysqldump -u username -h host -p db_name table_name &gt; table_name.sql</code><br>数据恢复：<br><code>mysql -u username -p db_name &lt; table_name.sql</code><br>数据导入：<code>mysqlimport -uroot -p123123 -h127.0.0.1 -P3306 db_name ~/usertable.txt</code></p>
]]></content>
      
        <categories>
            
            <category> mysql </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gperftools]]></title>
      <url>https://irgb.github.io/gperftools%20%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol>
<li>下载 <a href="https://github.com/gperftools/gperftools/archive/gperftools-2.0.tar.gz" target="_blank" rel="noopener">gperftools-2.0.tar.gz</a></li>
<li>执行以下命令安装:<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf gperftools-2.0.tar.gz</span><br><span class="line">cd gperftools-2.0</span><br><span class="line">export PATH=/opt/compiler/gcc-4.8.2/bin:$PATH</span><br><span class="line">./configure --prefix=~/gperftools --enable-frame-pointers</span><br><span class="line">make &amp;&amp; make install # 如果编译不过，可尝试将configure生成的Makefile CXXFLAGS = -g -O2 配置改为 CXXFLAGS = -g -O2 -fpermissive</span><br><span class="line">export PATH=~/gperftools/bin:$PATH</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="CPU-Profiler"><a href="#CPU-Profiler" class="headerlink" title="CPU Profiler"></a>CPU Profiler</h3><p>用来分析性能瓶颈, 监控各函数的 cpu 耗时.</p>
<ol>
<li>添加头文件 <code>#include &quot;gperftools/profiler.h&quot;</code>或 <code>#include &quot;google/profiler.h&quot;</code></li>
<li>在要监控的代码开头位置添加 <code>ProfilerStart(&quot;cpu.perf&quot;);</code>, 在结尾处添加<code>ProfilerStop();</code> 即可.</li>
<li>编译时链接指定链接参数<code>-I~/gperftools/include -L~/gperftools/lib -lprofiler</code></li>
<li>程序执行结束之后, 文件夹下会出现<code>cpu.perf</code> 文件, 用命令<code>pprof --text /path/to/binary cpu.prof</code> 用文本形式查看结果.</li>
</ol>
<blockquote>
<p>如果使用<code>--gv</code> 生成图形化结果, 需要安装<code>graphviz</code>(其中包含了 dot  绘图工具) 和 gv.</p>
</blockquote>
<p><strong>参考</strong></p>
<ul>
<li><a href="https://gperftools.github.io/gperftools/cpuprofile.html" target="_blank" rel="noopener">cpuprofile</a></li>
</ul>
<h3 id="Heap-Profiler"><a href="#Heap-Profiler" class="headerlink" title="Heap Profiler"></a>Heap Profiler</h3><ol>
<li>添加头文件<code>#include &quot;gperftools/heap-profiler.h&quot;</code>或 <code>#include &quot;google/heap-profiler.h&quot;</code></li>
<li>在要监控的代码开头位置添加 <code>HeapProfilerStart(&quot;heap.perf&quot;);</code>, 在结尾处添加<code>HeapProfilerStop();</code> 即可.</li>
</ol>
<p><strong>参考</strong></p>
<ul>
<li><a href="https://gperftools.github.io/gperftools/heapprofile.html" target="_blank" rel="noopener">heapprofile</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c++ tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++ atomic, lock 性能对比]]></title>
      <url>https://irgb.github.io/C++/atomic_vs_lock/</url>
      <content type="html"><![CDATA[<p>下面的代码用 atomic 和 lock 分别实现了线程安全的计数器, 可以看到 atomic 的性能比 lock 提升了数十倍.<br>正常开发中可以使用C++ 标准库中的 atomic<int>, 具有更高的性能, 比 lock 高百倍.<br>另外, 标准库中的 atomic_flag 也可以当做自旋锁来使用.</int></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;thread&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;atomic&gt;</span><br><span class="line">#include &lt;sys/time.h&gt;</span><br><span class="line"></span><br><span class="line">const int iter_num = 100000;</span><br><span class="line">const int thread_num = 3;</span><br><span class="line"></span><br><span class="line">int g_count = 0;</span><br><span class="line"></span><br><span class="line">std::atomic&lt;bool&gt; atomic_lock(false);</span><br><span class="line">std::mutex mtx;</span><br><span class="line"></span><br><span class="line">void unsafe_worker() &#123;</span><br><span class="line">    for (int i = 0; i &lt; iter_num; ++i) &#123;</span><br><span class="line">        ++g_count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  * 可以用 atomic&lt;int&gt; 轻易地实现线程安全的计数器,</span><br><span class="line">  * 这里用 atomic 实现自旋锁, 主要是为了和 lock 做对比</span><br><span class="line">  */</span><br><span class="line">void atomic_worker() &#123;</span><br><span class="line">    for (int i = 0; i &lt; iter_num; ++i) &#123;</span><br><span class="line">        bool expected = false;</span><br><span class="line">        // 自旋锁</span><br><span class="line">        do &#123;</span><br><span class="line">            expected = false;</span><br><span class="line">        &#125; while (!atomic_lock.compare_exchange_weak(expected, true));</span><br><span class="line">        ++g_count;</span><br><span class="line">        atomic_lock.store(false);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void lock_worker() &#123;</span><br><span class="line">    for (int i = 0; i &lt; iter_num; ++i) &#123;</span><br><span class="line">        std::unique_lock&lt;std::mutex&gt; lock(mtx);</span><br><span class="line">        ++g_count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void run(std::function&lt;void()&gt; worker) &#123;</span><br><span class="line">    g_count = 0;</span><br><span class="line">    std::thread threads[thread_num];</span><br><span class="line">    for (int i = 0; i &lt; thread_num; ++i) &#123;</span><br><span class="line">        threads[i] = std::thread(worker);</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 0; i &lt; thread_num; ++i) &#123;</span><br><span class="line">        threads[i].join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    timeval start_time = (struct timeval) &#123;0&#125;;</span><br><span class="line">    timeval end_time = (struct timeval) &#123;0&#125;;</span><br><span class="line">    long interval = 0;</span><br><span class="line"></span><br><span class="line">    int expected = iter_num * thread_num;</span><br><span class="line"></span><br><span class="line">    run(unsafe_worker);</span><br><span class="line">    std::cout &lt;&lt; &quot;g_count = &quot; &lt;&lt; g_count &lt;&lt; &quot;, expected : &quot; &lt;&lt; expected &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    gettimeofday(&amp;start_time, NULL);</span><br><span class="line">    run(atomic_worker);</span><br><span class="line">    gettimeofday(&amp;end_time, NULL);</span><br><span class="line">    interval = ((end_time.tv_sec - start_time.tv_sec) * 1000 * 1000 + (end_time.tv_usec - start_time.tv_usec));</span><br><span class="line">    std::cout &lt;&lt; &quot;g_count = &quot; &lt;&lt; g_count &lt;&lt; &quot;, expected : &quot; &lt;&lt; expected &lt;&lt; &quot;, interval : &quot; &lt;&lt; interval &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    gettimeofday(&amp;start_time, NULL);</span><br><span class="line">    run(lock_worker);</span><br><span class="line">    gettimeofday(&amp;end_time, NULL);</span><br><span class="line">    interval = ((end_time.tv_sec - start_time.tv_sec) * 1000 * 1000 + (end_time.tv_usec - start_time.tv_usec));</span><br><span class="line">    std::cout &lt;&lt; &quot;lock_g_count = &quot; &lt;&lt; g_count &lt;&lt; &quot;, expected : &quot; &lt;&lt; expected &lt;&lt; &quot;, interval : &quot; &lt;&lt; interval &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[德州扑克（texas poker)]]></title>
      <url>https://irgb.github.io/%E5%BE%B7%E5%B7%9E%E6%89%91%E5%85%8B/</url>
      <content type="html"><![CDATA[<h3 id="筹码量"><a href="#筹码量" class="headerlink" title="筹码量"></a>筹码量</h3><ul>
<li>深筹码: 筹码量 &gt; 200BB</li>
<li>常规筹码: 100BB, 这也是大多数扑克室规定的最大买入.</li>
<li>中等筹码: 35BB-50BB,</li>
<li>短筹码: 在标最大买入为100BB时，如果筹码剩下不到30BB，可以看作是短筹码。更常用的方法是根据筹码与底池的比例(SPR) &lt;= 4 来判断.</li>
</ul>
<h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><ul>
<li>Button : 庄家, 即 Dealer, 牌桌上拥有 D 标志的玩家位置, 这是全场最有利的位置, 决定了牌圈行动顺序</li>
<li>UTG : Under The Gun. 枪口位, 大盲注的左手边第一位, 翻牌前最先下注.</li>
<li>suit : 同花色, 通常简写为 s, 如 AKs, 表示 AK 同花色.</li>
<li>off suit : 不同花色, 通常简写为 ‘o’. 如 AKo, 表示 AK 不同花色.</li>
<li>s : spade,黑桃</li>
<li>c : club, 梅花</li>
<li>d : diamond, 方片</li>
<li>h : heart, 红桃</li>
<li>SB : Small Blind. 与 Big Blind 对应.</li>
<li>Straight : 顺子</li>
<li>Flush: 同花</li>
<li>Full House : 葫芦</li>
<li>set : 三条, 又称 three of a kind</li>
<li>quad: 四条, 金刚, 又称 four of a kind</li>
<li>kicker (起脚牌): 如果玩家们比较成牌时, 具有相同的最大牌型(三条, 两对等), 此时需要比较单牌, 这张单牌就叫做 kicker. 例如, 起手牌为KQ, flop 为Q9A, 两个 Q 凑成一对, K 就是一个准 kicker.</li>
<li>draw :(听牌). 玩家的底牌与公共牌组合出差1张成牌的牌型. 如底牌为 J9, 翻牌为 T83, 那么此时玩家就处于听顺的状态. 其他还有听花等.</li>
<li>redraw : (再听牌), 玩家在听牌成功之后, 又可以继续听牌组成更大牌型, 如底牌为 J9, 翻牌为T83, 转牌为7, 此时玩家处于 redraw 状态.</li>
<li>overcards : 底牌比牌面上的公共牌都大.</li>
<li>bet : 下注</li>
<li>call : 跟注</li>
<li>raise : 加注</li>
<li>reraise : 再加注</li>
<li>fold : 弃牌, 有的称为盖牌</li>
<li>muck : 埋牌, 有的也成为盖牌. 当前面已经有人亮牌之后, 后面的玩家如果牌面比较小, 可以选择不亮出底牌, 即埋牌.</li>
<li>check : 让牌</li>
<li>bluff : 诈唬</li>
<li>T : ten, 即扑克牌中的 10</li>
<li>nuts: 坚果. 即能和公共牌组成的最强牌. 如公共牌为KKT52, 能和其组成 nuts 的是 KKKK.</li>
<li>outs : 补牌. </li>
<li>pot: 底池. 当前牌局的总注额</li>
<li>Rainbow : 彩虹. 三张翻拍的花色各不相同. </li>
<li>Showdown : 摊牌. 河牌圈(最后一轮押注)结束之后, 存在至少两名玩家没有放弃, 就从最后一名加注玩家开始依次亮牌.</li>
<li>pre-flop : 翻牌前. 是第一轮下注阶段</li>
<li>flop: 翻牌, 即前三张公共牌</li>
<li>flop-round : 翻牌圈. 翻牌亮出以后的下注轮</li>
<li>turn : 第四张公共牌</li>
<li>turn-round: 转牌圈. 转牌亮出之后的下注轮</li>
<li>river: 第五张公共牌</li>
<li>river-round : 河牌圈, 最后一轮下注轮.</li>
<li>limp : 在翻牌前平跟一个大盲注进入牌局</li>
</ul>
<h3 id="胜率与赔率"><a href="#胜率与赔率" class="headerlink" title="胜率与赔率"></a>胜率与赔率</h3><h3 id="牌手类型"><a href="#牌手类型" class="headerlink" title="牌手类型"></a>牌手类型</h3><ul>
<li>松: 入局率(VPIP) 越高, 越松</li>
<li>紧: 入局率越低, 越紧. 这样的牌手通常在等待比较强的牌</li>
<li>凶: 玩一手牌时, 持续加注进攻的凶</li>
<li>弱: 玩一手牌时, 往往跟注和过牌的弱</li>
</ul>
<p>德扑高手一般都是在<strong>松凶型</strong>和<strong>紧凶型</strong>之间切换的.</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.thepokerbank.com/strategy/mathematics/pot-odds/4-2/" target="_blank" rel="noopener">The Rule of 4 and 2</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> fun </category>
            
        </categories>
        
        
        <tags>
            
            <tag> fun </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++ 工厂模式]]></title>
      <url>https://irgb.github.io/C++/%20C++%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><p>工厂模式经常用来代码解耦。常用于插件系统，如下图所示：<br><img src="/images/factory_pattern_file_dependency.jpg" height="200," width="300/"><br>用户只需要创建新的 plugin 即可，而不需要修改代码的其它部分。程序在启动的时候会自动把所有 plugin 注册到 factory 中，主程序中根据用户参数就可以创建指定的 plugin 对象。</p>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><p><strong>main.cpp</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"base.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"factory.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//before entering main function, all global (static) variables will be initialized, in which process plugins are registered to factory.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Factory &amp; factory = Factory::Instance();</span><br><span class="line">    <span class="comment">//p1, p2 are unique_ptr&lt;Base&gt;, so caller own new created plugin object.</span></span><br><span class="line">    <span class="keyword">auto</span> p1 = factory.Create(<span class="string">"Plugin1"</span>);</span><br><span class="line">    <span class="keyword">auto</span> p2 = factory.Create(<span class="string">"Plugin2"</span>);</span><br><span class="line">    <span class="keyword">auto</span> p3 = factory.Create(<span class="string">"Plugin3"</span>);</span><br><span class="line">    <span class="keyword">if</span> (p1) &#123;</span><br><span class="line">        p1-&gt;do_something();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p2) &#123;</span><br><span class="line">        p2-&gt;do_something();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p3) &#123;</span><br><span class="line">        p3-&gt;do_something();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>factory.h</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _FACTORY_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _FACTORY_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"base.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Factory&amp; <span class="title">Instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> Factory singleton;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::function&lt;Base*()&gt; CreatorFunc;</span><br><span class="line">    <span class="comment">// ATTENTION: can not use register as function name, becase register is a keyword in C++11</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Derived&gt;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Register</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; plugin_name)</span> </span>&#123;</span><br><span class="line">        CreatorFunc creator_func = Creator&lt;Derived&gt;;</span><br><span class="line">        <span class="keyword">auto</span> ret = _map.insert(<span class="built_in">std</span>::make_pair(plugin_name, creator_func));</span><br><span class="line">        <span class="keyword">return</span> ret.second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// do not return raw pointer directly, use smart pointer</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Base&gt; Create(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp; plugin_name) &#123;</span><br><span class="line">        <span class="keyword">auto</span> iter = _map.find(plugin_name);</span><br><span class="line">        <span class="keyword">if</span> (iter == _map.end()) <span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Base&gt;(<span class="literal">nullptr</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Base&gt;((iter-&gt;second)());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> Derived&gt;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Derived* <span class="title">Creator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Derived();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, CreatorFunc&gt; _map;</span><br><span class="line">    Factory() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// forbid copy constructor and assign operation,</span></span><br><span class="line">    <span class="comment">// to make sure Factory is a Singleton</span></span><br><span class="line">    Factory(<span class="keyword">const</span> Factory &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    Factory &amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> Factory &amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="comment">// forbid move constructor and move assign operation,</span></span><br><span class="line">    <span class="comment">// to make sure Factory is a Singleton</span></span><br><span class="line">    Factory(Factory &amp;&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    Factory &amp; <span class="keyword">operator</span> = (Factory &amp;&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// macro is used widely in many factory pattern implementation. But, macro is ugly, it make program hard to comprehend and debug, so avoid using it</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REGISTER_PLUGIN(CLASSNAME) \</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">auto</span> CLASSNAME##register_result = Factory::Instance().Register&lt;CLASSNAME&gt;(#CLASSNAME); \</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p><strong>base.h</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _BASE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _BASE_H</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">do_something</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p><strong>plugin1.cpp</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"base.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"factory.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plugin1</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">do_something</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Plugin1"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//static const auto register_result1 = Factory::Instance().Register("Plugin1", Creator&lt;Plugin1&gt;);</span></span><br><span class="line">REGISTER_PLUGIN(Plugin1);</span><br></pre></td></tr></table></figure>
<p><strong>plugin2.cpp</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"base.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"factory.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plugin2</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">do_something</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Plugin2"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//static const auto register_result2 = Factory::Instance().Register("Plugin2", Creator&lt;Plugin2&gt;);</span></span><br><span class="line">REGISTER_PLUGIN(Plugin2);</span><br></pre></td></tr></table></figure>
<p><strong>编译运行</strong><br>上面的代码中再 Factory 中记录了所有 Plugin 的创建方法，每次 create 都会返回一个新的对象,<br>将所有文件放到一个文件夹下，执行以下命令:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g++ -std=c++11 main.cpp plugin1.cpp plugin2.cpp -o main</span><br><span class="line">./main</span><br></pre></td></tr></table></figure></p>
<p>需要注意的是：</p>
<ol>
<li>上面的代码中 Factory 只能注册 Base 的子类，如果要实现通用的 Factory，可以把 Factory 改成类模板。</li>
<li><p>这里的实现和 <a href="https://gist.github.com/Cilyan/a8117124b04b64642646" target="_blank" rel="noopener">Compile-Time Plugin System(github)</a> 中的实现是一致的，对应关系为：</p>
<ul>
<li>Factory &lt;=&gt; PluginFactory</li>
<li>CreatorFunc &lt;=&gt; IPluginRegistrar</li>
<li>Base &lt;=&gt; IPlugin</li>
<li>Plugin1, Plugin2 &lt;=&gt; Plugin1</li>
</ul>
</li>
</ol>
<h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><ul>
<li><a href="https://stackoverflow.com/a/5451094/5432806" target="_blank" rel="noopener">C++ loop over all subclasses of an Abstract class?
</a></li>
<li><a href="https://gist.github.com/Cilyan/a8117124b04b64642646" target="_blank" rel="noopener">Compile-Time Plugin System(github)</a></li>
<li><a href="https://codereview.stackexchange.com/questions/119812/compile-time-plugin-system" target="_blank" rel="noopener">Compile-time plugin system(stackoverflow)</a></li>
<li><a href="https://stackoverflow.com/a/26950454/5432806" target="_blank" rel="noopener">Implement the factory method pattern in C++ correctly
</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c++ design-pattern factory-pattern </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++ 代码调试]]></title>
      <url>https://irgb.github.io/C++/C++%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95/</url>
      <content type="html"><![CDATA[<h4 id="启动-gdb"><a href="#启动-gdb" class="headerlink" title="启动 gdb"></a>启动 gdb</h4><p>使用条件：编译时加入 debug 信息，即 <code>gcc -g</code>.<br>进入调试：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdb &lt;program&gt; # 直接调试可执行文件</span><br><span class="line">gdb &lt;program&gt; &lt;core dump file&gt; # 查 core</span><br><span class="line">gdb &lt;program&gt; &lt;PID&gt;  # 调试已经启动的程序</span><br></pre></td></tr></table></figure></p>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul>
<li>bt : backtrace. 显示当前调用栈</li>
<li>f n : 切换到第 n 个栈帧</li>
<li>i locals : 查看当前栈帧包含的局部变量</li>
<li>i threads : 查看当前进程的线程</li>
<li>b : break. 给程序加断点<ul>
<li>i b : 查看当前所有断点信息</li>
<li>b n : 在当前栈帧所属的文件的第 n 行处加断点</li>
<li>b fun : 在函数 fun 的入口处加断点</li>
<li>d n : 删除断点号 i</li>
<li>disable n : 暂时禁用断点 n</li>
<li>enable n : 启用断点 n</li>
<li>d breakpoints : 删除所有断点</li>
</ul>
</li>
<li>watch $rbx == 0x00ffffff00 : 监控寄存器，当值为 0x00ffffff00 时暂停，和加断点是一样的效果，同样也可监控变量的值</li>
<li>r : run. 启动程序，直到第一个断点处，或等待用户输入</li>
<li>c : continue. 继续执行，直到下一个断点处，或等待用户输入</li>
<li>n : next. 执行下一条语句，不进入函数内部</li>
<li>s : step. 执行下一条语句，进入函数内部<ul>
<li>x/i $pc : 显示下一条要执行的指令</li>
<li>x/16x 0x7fffffffe8a0 : 显示从地址0x7fffffffe8a0 开始的 16 字节的内存的内容</li>
<li>si : 执行下一条指令</li>
<li>si n : 执行后 n 条指令</li>
</ul>
</li>
<li>until : 运行程序知道退出循环<ul>
<li>until n : 运行至第 n 行</li>
</ul>
</li>
<li>disassemble /rm : 查看当前栈帧的汇编代码, /r : 显示16进制的指令号; /m : 显示相应的源码</li>
<li>i registers : 打印当前寄存器的值<ul>
<li>i registers rbp rsp : 显示寄存器 rbp，rsp 的值</li>
</ul>
</li>
<li>set $rsp -= 0x10 : 设置寄存器 rsp 的值</li>
<li>set $tmp = 0 : 设置临时变量 tmp</li>
<li>k : kill. 杀掉进程</li>
<li>shell ls : 执行 shell 命令</li>
<li>p var : 打印变量 var 的值</li>
<li>whatis var : 显示变量 var 的类型</li>
<li>pt var : ptype. 显示变量 var 的类型的定义</li>
</ul>
<h4 id="启用gdb命令历史"><a href="#启用gdb命令历史" class="headerlink" title="启用gdb命令历史"></a><a href="https://stackoverflow.com/a/3176802/5432806" target="_blank" rel="noopener">启用gdb命令历史</a></h4><p>在 ~/.gdbinit 中添加：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set history filename ~/.gdb_history</span><br><span class="line">set history save on</span><br><span class="line">set history size 1000</span><br></pre></td></tr></table></figure>
<h4 id="cgdb"><a href="#cgdb" class="headerlink" title="cgdb"></a>cgdb</h4><p><strong>优点</strong>:</p>
<ul>
<li>比 gdb 更加好用的调试工具，调试时可以同步看到源码</li>
<li>自动保存命令历史</li>
</ul>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul>
<li><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/gdb.html" target="_blank" rel="noopener">gdb 调试利器</a></li>
<li><a href="http://xuwenjie.blog.51cto.com/6978573/1192028" target="_blank" rel="noopener"></a></li>
<li><a href="https://blogs.gnome.org/raywang/page/23/" target="_blank" rel="noopener"></a></li>
<li><a href="http://www.cnblogs.com/xsln/p/gdb_instructions1.html" target="_blank" rel="noopener"></a></li>
<li><a href="https://segmentfault.com/a/1190000004136351" target="_blank" rel="noopener">解决gdb在Mac下不能调试的问题</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c++ gcc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gcc / g++编译]]></title>
      <url>https://irgb.github.io/C++/GCC%20%E7%BC%96%E8%AF%91/</url>
      <content type="html"><![CDATA[<h3 id="gcc、g-常用编译参数"><a href="#gcc、g-常用编译参数" class="headerlink" title="gcc、g++ 常用编译参数"></a>gcc、g++ 常用编译参数</h3><ul>
<li>-E : 预处理，处理结果输出到标准输出，如果需要输出到文件，需要使用 -o 参数，通常用 ‘.i’ 作为后缀.</li>
<li>-S : 编译，生成汇编代码。默认输出到文件，后缀为 ‘.s’.</li>
<li>-c : 汇编，把C/C++代码或汇编代码转成可执行文件，默认输出到文件，后缀为 ‘.o’.</li>
<li><p>-o : 指定目标文件名，可用于编译的各个阶段.</p>
<blockquote>
<p>从 C/C++ 代码到可执行文件分成四个步骤：预处理、编译、汇编、链接，可以用参数来一步步执行。</p>
</blockquote>
</li>
<li><p>-O : 指定编译优化级别，共 0~3 四个级别, 默认为 ‘-O0’, 即不用任何优化，’-O’ 等价于 ‘-O1’. 参考：<a href="https://stackoverflow.com/a/1778700/5432806" target="_blank" rel="noopener">GCC optimization levels</a></p>
</li>
<li>-g : 在生成的可执行文件中加入调试信息。</li>
<li>-L : 指定库所在的目录</li>
<li><p>-l : 指定链接时要链接的库（注意，库文件 libtest.a 的库名是 test）</p>
<blockquote>
<p>如库 libtest.a 保存在目录 ‘/home/lib’ 下，编译的时候需用命令 <code>g++ -L/home/lib -ltest main.cpp -o main</code>, 否则会出现链接错误。</p>
</blockquote>
</li>
<li><p>-i : 指定所需的头文件。</p>
</li>
<li>-I : 指定所需的头文件所在的目录。g++可以自动在目录中搜索需要的头文件，所以 ‘-i’ 参数很少使用.</li>
<li>-Wall : 显示所有编译警告信息</li>
<li>-Werror : 把所有警告当做错误处理</li>
<li>-w : 关闭所有警告信息</li>
</ul>
<h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><ul>
<li><a href="https://stackoverflow.com/questions/172587/what-is-the-difference-between-g-and-gcc" target="_blank" rel="noopener">What is the difference between g++ and gcc?</a></li>
<li><a href="https://stackoverflow.com/a/14502287/5432806" target="_blank" rel="noopener">gdb - How to view a pointer like an array?</a></li>
<li><a href="https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html" target="_blank" rel="noopener">GCC Warning-Options</a></li>
</ul>
<h3 id="编译到静态库或动态库"><a href="#编译到静态库或动态库" class="headerlink" title="编译到静态库或动态库"></a>编译到静态库或动态库</h3><p>静态库只是一些目标文件的集合.<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 编译目标文件 .o</span><br><span class="line">gcc -c file.c</span><br><span class="line">g++ -c file.cpp</span><br><span class="line">// 打包成静态库</span><br><span class="line">ar cr libmalloc_wrap.a malloc_wrap.o</span><br><span class="line">// 打包成动态库</span><br><span class="line">gcc -fPIC -shared -o libfile.so ./file.c -ldl</span><br></pre></td></tr></table></figure></p>
<p><strong>注意</strong>: 在编译动态库时, 一定要指定-fPIC 生成位置无关代码.</p>
<h3 id="常见编译问题"><a href="#常见编译问题" class="headerlink" title="常见编译问题"></a>常见编译问题</h3><h4 id="类型转换错误："><a href="#类型转换错误：" class="headerlink" title="类型转换错误："></a>类型转换错误：</h4><p>如果指定了-Werror 会把所有的 warning 当做 error。如果要抑制部分 warning，如unsigned int 转 int 等，可以添加编译参数 <code>-Wno-error=sign-conversion</code>。</p>
<blockquote>
<p>参考：</p>
<ul>
<li><a href="http://en.cppreference.com/w/cpp/language/implicit_conversion" target="_blank" rel="noopener">C++ Implicit Conversion</a></li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c++ gcc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[百度云下载加速工具 Aria2]]></title>
      <url>https://irgb.github.io/%E7%99%BE%E5%BA%A6%E4%BA%91%E4%B8%8B%E8%BD%BD%E5%8A%A0%E9%80%9F%E5%B7%A5%E5%85%B7%20Aria2/</url>
      <content type="html"><![CDATA[<ol>
<li>在 <a href="https://github.com/aria2/aria2/releases" target="_blank" rel="noopener">https://github.com/aria2/aria2/releases</a> 下载安装 aria2.</li>
<li><p>在 ~/.aria2/aria.conf 中添加配置：</p>
 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Basic Options</span><br><span class="line">dir=/Users/XXX/Downloads  # replace XXX to username</span><br><span class="line">input-file=/Applications/aria2c/session.dat</span><br><span class="line">log=/Applications/aria2c/aria2.log</span><br><span class="line">max-concurrent-downloads=15</span><br><span class="line">max-connection-per-server=15</span><br><span class="line">check-integrity=true</span><br><span class="line">continue=true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> BitTorrent/Metalink Options</span><br><span class="line">bt-enable-lpd=true</span><br><span class="line">bt-max-open-files=16</span><br><span class="line">bt-max-peers=8</span><br><span class="line">dht-file-path=/opt/var/aria2/dht.dat</span><br><span class="line">dht-file-path6=/opt/var/aria2/dht6.dat</span><br><span class="line">dht-listen-port=6801</span><br><span class="line"><span class="meta">#</span>enable-dht6=true</span><br><span class="line">listen-port=6801</span><br><span class="line">max-overall-upload-limit=0K</span><br><span class="line">seed-ratio=0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> RPC Options</span><br><span class="line">enable-rpc=true</span><br><span class="line">rpc-allow-origin-all=true</span><br><span class="line">rpc-listen-all=true</span><br><span class="line">rpc-listen-port=6800</span><br><span class="line"><span class="meta">#</span>rpc-secret=123456</span><br><span class="line"><span class="meta">#</span>rpc-secure=true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Advanced Options</span><br><span class="line">daemon=true</span><br><span class="line">disable-ipv6=true</span><br><span class="line"><span class="meta">#</span>enable-mmap=true</span><br><span class="line">force-save=true</span><br><span class="line">file-allocation=none</span><br><span class="line">log-level=warn</span><br><span class="line">max-overall-download-limit=0K</span><br><span class="line">save-session=/Applications/aria2c/session.dat</span><br><span class="line">always-resume=true</span><br><span class="line">split=10</span><br><span class="line">min-split-size=10M</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>百度盘</span><br><span class="line">user-agent=netdisk;5.2.6;PC;PC-Windows;6.2.9200;WindowsBaiduYunGuanJia</span><br><span class="line">referer=http://pan.baidu.com/disk/home</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行以下命令：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /Applications/aria2c</span><br><span class="line">touch /Applications/aria2c/session.dat</span><br><span class="line">touch /Applications/aria2c/aria2.log</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li>执行 /usr/local/aria2c/bin/aria2c（完整的启动命令是：<code>aria2c --conf-path=&quot;~/.aria2/aria2.conf&quot; -D</code>）, 用<code>ps aux|grep aria2c</code>确认 aria2c 启动成功。</li>
<li><p>安装 BaiduExpoter.crx Chrome 插件：<a href="https://github.com/acgotaku/BaiduExporter/releases" target="_blank" rel="noopener">https://github.com/acgotaku/BaiduExporter/releases</a></p>
<p> 安装插件之后，百度云网页上会出现“导出下载”按钮，如下图所示。点击 ARIA2 RPC，aria2 就可以在后台开始下载了。<br> <img src="https://i.imgsafe.org/132a8da2aa.png" alt=""></p>
</li>
<li><p>在 <a href="https://ziahamza.github.io/webui-aria2/" target="_blank" rel="noopener">https://ziahamza.github.io/webui-aria2/</a> 中添加如图所示的设置，可以监控下载进度。</p>
<p> <img src="https://i.imgsafe.org/135e16dce6.png" alt=""></p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最短路径题集（Shortest Path Problems)]]></title>
      <url>https://irgb.github.io/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</url>
      <content type="html"><![CDATA[<p>Shortest Path: Dijkstra, Bellman-Ford，Floyd-Warshall，SPFA</p>
<h2 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h2>]]></content>
      
        <categories>
            
            <category> algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> graph </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven 常用命令和配置]]></title>
      <url>https://irgb.github.io/Maven-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="打加入依赖的包"><a href="#打加入依赖的包" class="headerlink" title="打加入依赖的包"></a>打加入依赖的包</h2><p>在 pom.xml 中加入 <code>maven-shade-plugin</code> 插件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    	 <span class="tag">&lt;<span class="name">minimizeJar</span>&gt;</span>true<span class="tag">&lt;/<span class="name">minimizeJar</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">transformer</span></span></span><br><span class="line"><span class="tag">                                    <span class="attr">implementation</span>=<span class="string">"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.example.app.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在 maven 项目目录下运行命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure>
<p>可以看到 target 目录下包含两个 jar 包：</p>
<ul>
<li>my-app-1.0-SNAPSHOT.jar : with dependencies     </li>
<li>original-my-app-1.0-SNAPSHOT.jar : without dependencies</li>
</ul>
<p><strong>Attention</strong></p>
<ul>
<li>上面的配置同时指定了程序的入口<code>com.example.app.Main</code>, 执行命令 <code>java -jar ./target/my-app-1.0-SNAPSHOT.jar</code> 可以执行 jar 包。</li>
<li>minimizeJar 配置的作用是最小化 jar 包，即只将程序依赖的 classes 文件加入 jar 包中，这会大大减小包的大小。</li>
<li><a href="https://www.mkyong.com/maven/create-a-fat-jar-file-maven-assembly-plugin/" target="_blank" rel="noopener">还可以利用 <code>maven-assembly-plugin</code> 打包</a>，但这个插件不能解决依赖同一个包的多版本时的冲突</li>
</ul>
<p><strong>Reference</strong></p>
<ul>
<li><a href="http://www.mkyong.com/maven/create-a-fat-jar-file-maven-shade-plugin/" target="_blank" rel="noopener">Create a fat Jar file – Maven Shade Plugin</a></li>
<li><a href="http://maven.apache.org/plugins/maven-shade-plugin/shade-mojo.html" target="_blank" rel="noopener">Apache Maven Shade Plugin - shade:shade</a></li>
</ul>
<h2 id="mvn-命令常用参数"><a href="#mvn-命令常用参数" class="headerlink" title="mvn 命令常用参数"></a>mvn 命令常用参数</h2><ul>
<li><code>-Dmaven.test.skip=true</code> : 即不编译 test 代码，也不运行单元测试。</li>
<li><code>-Dmaven.javadoc.skip=true</code> : 不生成 javadoc 包。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> maven </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Implement Chatroom using javax.websocket and jetty.]]></title>
      <url>https://irgb.github.io/WebSocket-demo/</url>
      <content type="html"><![CDATA[<p>jetty 既实现了 jsr-356 中定义的 websocket 规范（javax.websocket），也实现了一套自己的 websocket，包名分别是 org.eclipse.jetty.websocket.api 和 org.eclipse.jetty.websocket.jsr356。</p>
<p>为了代码的可移植性，这里采用 javax.websocket。</p>
<h3 id="实现-websocket-处理类"><a href="#实现-websocket-处理类" class="headerlink" title="实现 websocket 处理类"></a>实现 websocket 处理类</h3><p>定义一个 websocket 处理类非常简单，只需要在 POJO 上添加一些注解即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.websocket.*;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ServerEndpoint</span>(<span class="string">"/chat"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatWebSocket</span> </span>&#123;</span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"WebSocket opened: "</span> + session.getId());</span><br><span class="line">    	 <span class="comment">// do something ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextMessage</span><span class="params">(String message, Session session)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"receive text message : "</span> + message);</span><br><span class="line">    	 <span class="comment">// do something ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session, Throwable throwable)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Error happened."</span>);</span><br><span class="line">	     <span class="comment">// do something ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">(CloseReason reason, Session session)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Websocket clsoed： "</span> + reason.getReasonPhrase());</span><br><span class="line">        <span class="comment">//do something ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用 @ServerEndpoint 注解的 POJO 就是一个 websocket 处理类。servlet 容器启动时会自动加载这些类。@ServerEndpoint 可以包含一个路径参数，这个路径下的所有 websocket 连接都会交给这个类来处理。@OnOpen，@OnMessage，@OnError，@OnClose 都是 websocket 不同事件发生时的回调函数。从字面意思很容易判断其含义。</p>
<h3 id="Chatroom-source-code"><a href="#Chatroom-source-code" class="headerlink" title="Chatroom source code"></a>Chatroom source code</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:irgb/websocket-chatroom-demo.git</span><br><span class="line">git checkout v1.0</span><br><span class="line">mvn jetty:run</span><br></pre></td></tr></table></figure>
<p>在浏览器中打开 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 即可打开聊天界面，打开多个窗口，即可实现聊天：<br><img src="https://i.imgsafe.org/b9e25318b2.png" alt=""></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="http://blog.teamtreehouse.com/an-introduction-to-websockets" target="_blank" rel="noopener">An Introduction to WebSockets</a></li>
<li><a href="https://www.tutorialspoint.com/html5/html5_websocket.htm" target="_blank" rel="noopener">websocket brief tutorial</a></li>
<li><a href="https://www.eclipse.org/jetty/documentation/9.4.x/ws-intro-api.html" target="_blank" rel="noopener">Jetty WebSocket</a></li>
<li><a href="http://django-websocket-redis.readthedocs.io/en/latest/heartbeats.html" target="_blank" rel="noopener">websocket heartbeat</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> websocket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git 常用命令]]></title>
      <url>https://irgb.github.io/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/Git%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="push-tag"><a href="#push-tag" class="headerlink" title="push tag:"></a>push tag:</h2><ol>
<li>git push \&lt;remote> tag_name # push a single tag</li>
<li>git push \&lt;origin> --tags # push all tags</li>
</ol>
<h2 id="undo-all-uncommit-changes"><a href="#undo-all-uncommit-changes" class="headerlink" title="undo all uncommit changes:"></a>undo all uncommit changes:</h2><ol>
<li>git clean -fd # delete all untracked files and directories</li>
<li>git reset --hard # removes staged and working directory changes</li>
<li>git checkout /path/to/your/file # checkout a file from HEAD, and overwrite your change.</li>
</ol>
<h2 id="pring-branch-tree"><a href="#pring-branch-tree" class="headerlink" title="pring branch tree"></a>pring branch tree</h2><p>在<code>.gitconfig</code> 中添加：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[alias]</span><br><span class="line">lg = log --graph --abbrev-commit --decorate --format=format:'%C(cyan)%h%C(reset) - %C(white)%s%C(reset) %C(yellow)%d%C(reset) %C(dim white) - %anC(reset) %C(dim green)(%ci)%C(reset)' --all</span><br></pre></td></tr></table></figure>
<p>使用命令<code>git lg</code>就可以在命令行中看到branch tree 了</p>
<p><strong>Reference</strong>：</p>
<ul>
<li><a href="https://stackoverflow.com/a/9074343/5432806" target="_blank" rel="noopener">Pretty git branch graphs
</a></li>
<li><a href="https://stackoverflow.com/a/15458378/5432806" target="_blank" rel="noopener">Git pretty format colors
</a></li>
</ul>
<h2 id="回滚到指定-commit-id"><a href="#回滚到指定-commit-id" class="headerlink" title="回滚到指定 commit id"></a>回滚到指定 commit id</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git reset --hard 0682c06</span><br><span class="line">HEAD is now at 0682c06</span><br><span class="line">$ git reset --soft HEAD@&#123;1&#125;</span><br><span class="line">$ git commit -m &quot;Reverting to the state of the project at 0682c06&quot;</span><br></pre></td></tr></table></figure>
<p><strong>Reference</strong></p>
<ul>
<li><a href="https://stackoverflow.com/a/1895095/5432806" target="_blank" rel="noopener">https://stackoverflow.com/a/1895095/5432806</a></li>
<li><a href="http://serebrov.github.io/html/2014-01-04-git-revert-multiple-recent-comments.html" target="_blank" rel="noopener">http://serebrov.github.io/html/2014-01-04-git-revert-multiple-recent-comments.html</a></li>
<li><a href="https://stackoverflow.com/a/4114122/5432806" target="_blank" rel="noopener">https://stackoverflow.com/a/4114122/5432806</a></li>
</ul>
<h2 id="save-HTTPS-account"><a href="#save-HTTPS-account" class="headerlink" title="save HTTPS account"></a>save HTTPS account</h2><ol>
<li><strong>(Recommended)</strong> attach credential to remote repository url: <code>https://username:password@git.coding.net/username/repository.git</code></li>
<li>store temporarily: execute command <code>git config credential.helper &#39;cache --timeout=60&#39;</code>, then credential will expire after 60 seconds since last use.</li>
<li>store permanently: execute command <code>git config --global credential.helper store</code>, then credential will be stored in file <code>~/.git-credentials</code> and <code>~/.gitconfig</code> permanently.</li>
</ol>
<p><strong>Reference</strong>:</p>
<ul>
<li><a href="http://www.norbauer.com/rails-consulting/notes/git-revert-reset-a-single-file.html" target="_blank" rel="noopener">git: revert (reset) a single file</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git 常用命令]]></title>
      <url>https://irgb.github.io/Git%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="tag"><a href="#tag" class="headerlink" title="tag:"></a>tag:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># create a new tag </span><br><span class="line">git tag -a &quot;tag_name&quot; -m &quot;comment&quot;</span><br><span class="line"># list all tags</span><br><span class="line">git tag</span><br><span class="line"># push a single tag: </span><br><span class="line">git push origin tag_name</span><br><span class="line"># push all tags</span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure>
<h2 id="undo-all-uncommit-changes"><a href="#undo-all-uncommit-changes" class="headerlink" title="undo all uncommit changes:"></a>undo all uncommit changes:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. git clean -fd # delete all untracked files and directories</span><br><span class="line">2. git reset --hard # removes staged and working directory changes</span><br><span class="line">3. git checkout /path/to/your/file # checkout a file from HEAD, and overwrite your change.</span><br></pre></td></tr></table></figure>
<h2 id="pring-branch-tree"><a href="#pring-branch-tree" class="headerlink" title="pring branch tree"></a>pring branch tree</h2><p>在<code>.gitconfig</code> 中添加：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[alias]</span><br><span class="line">lg = log --graph --abbrev-commit --decorate --format=format:'%C(cyan)%h%C(reset) - %C(white)%s%C(reset) %C(yellow)%d%C(reset) %C(dim white) - %anC(reset) %C(dim green)(%ci)%C(reset)' --all</span><br></pre></td></tr></table></figure>
<p>使用命令<code>git lg</code>就可以在命令行中看到branch tree 了</p>
<p><strong>Reference</strong>：</p>
<ul>
<li><a href="https://stackoverflow.com/a/9074343/5432806" target="_blank" rel="noopener">Pretty git branch graphs
</a></li>
<li><a href="https://stackoverflow.com/a/15458378/5432806" target="_blank" rel="noopener">Git pretty format colors
</a></li>
</ul>
<h2 id="回滚到指定-commit-id"><a href="#回滚到指定-commit-id" class="headerlink" title="回滚到指定 commit id"></a>回滚到指定 commit id</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 0682c06</span><br><span class="line">git reset --soft HEAD@&#123;1&#125;</span><br><span class="line">git commit -m "Reverting to the state of the project at 0682c06"</span><br></pre></td></tr></table></figure>
<p>有时需要<strong>撤销以前的单个或多个 commit</strong>, 可用以下命令:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git revert -n &lt;commit id&gt; # -n means --no-commit, 否则 git 在 revert 之后会自动 commit.</span><br><span class="line">git revert -n &lt;commit id&gt; # 可以连续执行多次, 以 revert 多个 commit.</span><br><span class="line">git commit -m "revert commit_id1 and commit_id2"</span><br><span class="line"><span class="meta">#</span> 也可以用 git revert --continue, 来提交. 但默认的注释只包含第一次 revert 的 commit id.</span><br></pre></td></tr></table></figure></p>
<p><strong>Reference</strong></p>
<ul>
<li><a href="https://stackoverflow.com/a/1895095/5432806" target="_blank" rel="noopener">https://stackoverflow.com/a/1895095/5432806</a></li>
<li><a href="http://serebrov.github.io/html/2014-01-04-git-revert-multiple-recent-comments.html" target="_blank" rel="noopener">http://serebrov.github.io/html/2014-01-04-git-revert-multiple-recent-comments.html</a></li>
<li><a href="https://stackoverflow.com/a/4114122/5432806" target="_blank" rel="noopener">https://stackoverflow.com/a/4114122/5432806</a></li>
</ul>
<h2 id="save-HTTPS-account"><a href="#save-HTTPS-account" class="headerlink" title="save HTTPS account"></a>save HTTPS account</h2><ol>
<li><strong>(Recommended)</strong> attach credential to remote repository url: <code>https://username:password@git.coding.net/username/repository.git</code></li>
<li>store temporarily: execute command <code>git config credential.helper &#39;cache --timeout=60&#39;</code>, then credential will expire after 60 seconds since last use.</li>
<li>store permanently: execute command <code>git config --global credential.helper store</code>, then credential will be stored in file <code>~/.git-credentials</code> and <code>~/.gitconfig</code> permanently.</li>
</ol>
<p><strong>Reference</strong>:</p>
<ul>
<li><a href="http://www.norbauer.com/rails-consulting/notes/git-revert-reset-a-single-file.html" target="_blank" rel="noopener">git: revert (reset) a single file</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常用软件]]></title>
      <url>https://irgb.github.io/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h4 id="go2shell"><a href="#go2shell" class="headerlink" title="go2shell"></a><a href="http://zipzapmac.com/go2shell" target="_blank" rel="noopener">go2shell</a></h4><blockquote>
<p>go to shell from directory</p>
</blockquote>
<h4 id="The-Unarchiver"><a href="#The-Unarchiver" class="headerlink" title="The Unarchiver"></a><a href="https://theunarchiver.com/" target="_blank" rel="noopener">The Unarchiver</a></h4><blockquote>
<p>解压缩工具</p>
</blockquote>
<h4 id="skim"><a href="#skim" class="headerlink" title="skim"></a><a href="http://skim-app.sourceforge.net/" target="_blank" rel="noopener">skim</a></h4><blockquote>
<p>pdf reader and editor for mac os.</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 常用命令]]></title>
      <url>https://irgb.github.io/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/Linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h4 id="显示任意路径下所有文件夹的大小"><a href="#显示任意路径下所有文件夹的大小" class="headerlink" title="显示任意路径下所有文件夹的大小"></a>显示任意路径下所有文件夹的大小</h4><p>下面的命令显示 <code>/var</code> 下所有文件夹的大小:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls --color=none -lhd /var/* | awk '$1~/^d/ &#123;print $9&#125;' | xargs sudo du -sh`</span><br></pre></td></tr></table></figure>
<h4 id="按照某一列进行排序"><a href="#按照某一列进行排序" class="headerlink" title="按照某一列进行排序"></a>按照某一列进行排序</h4><p>下面的命令对当前文件夹下的所有文件进行降序排序</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ls -alhS # -h means --human</span><br><span class="line"><span class="meta">#</span> or</span><br><span class="line">ls --sort=size -alh</span><br><span class="line"><span class="meta">#</span> or</span><br><span class="line">ls -al | sort -k 5 -nr # -n 按照字符串的数值比较大小, 会忽略 K, M, G 等单位</span><br><span class="line"><span class="meta">#</span> or</span><br><span class="line">ls -alh | sort -k 5 -hr # 支持 K, M, G 等 human-kind 单位</span><br></pre></td></tr></table></figure>
<h4 id="编码转换"><a href="#编码转换" class="headerlink" title="编码转换"></a>编码转换</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iconv -f UTF-8 -t GBK -c /path/to/file</span><br></pre></td></tr></table></figure>
<blockquote>
<p>-s : silences warnings<br>-c : omits invalid characters from output<br>-f : source encoding<br>-t : target encoding  </p>
</blockquote>
<h4 id="查看-jar-包内容"><a href="#查看-jar-包内容" class="headerlink" title="查看 jar 包内容"></a>查看 jar 包内容</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -tf test.jar</span><br></pre></td></tr></table></figure>
<h4 id="统计文件行数或单词数"><a href="#统计文件行数或单词数" class="headerlink" title="统计文件行数或单词数"></a>统计文件行数或单词数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wc -l /path/to/file # line count</span><br><span class="line">wc -w /path/to/file # word count</span><br></pre></td></tr></table></figure>
<h4 id="获取文件指定行"><a href="#获取文件指定行" class="headerlink" title="获取文件指定行"></a>获取文件指定行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n 5,10p /path/to/file</span><br></pre></td></tr></table></figure>
<blockquote>
<p>获取文件的第5-10行</p>
</blockquote>
<h4 id="获取文本的第-k-列"><a href="#获取文本的第-k-列" class="headerlink" title="获取文本的第 k 列"></a>获取文本的第 k 列</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cut -d '\t' -f 1 total # cut 只支持单个字符分割，默认是\t</span><br><span class="line">awk '&#123;print $9&#125;' # awk 默认可以分割连续的空格</span><br><span class="line">awk -F ',' '&#123;print $1, $2&#125;' /path/to/file # 按照字符','进行分割，并打印第1，2列</span><br><span class="line">awk -F '[, ;]' '&#123;print $1&#125;' /path/to/file # 按照',', ' ' 或 ';' 进行分割</span><br><span class="line">awk -F 'SEP' '&#123;print $1&#125;' /path/to/file # 按照字符串“SEP”进行分割</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "word1SEPword2" | awk -F 'SEP' '&#123;print $1, $2&#125;'</span><br></pre></td></tr></table></figure>
<blockquote>
<p>word1 word2</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 'w1  ,; w2  ,,   w4' | awk -F '[[:blank:],;]+' '&#123;print NF&#125;'</span><br></pre></td></tr></table></figure>
<blockquote>
<p>3<br>按照连续的空白、’,’, ‘;’分割，NF 表示 Number of fields。表示分割之后的 field 的数目。<br>参考：<a href="http://dcx.sybase.com/1101/zh/dbreference_zh11/rf-sqllanguage-s-4915351.html" target="_blank" rel="noopener">正则表达式</a></p>
</blockquote>
<h4 id="文本行去重，相同行数统计"><a href="#文本行去重，相同行数统计" class="headerlink" title="文本行去重，相同行数统计"></a>文本行去重，相同行数统计</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo "</span><br><span class="line">This is line1</span><br><span class="line">This is line1</span><br><span class="line">This is line2</span><br><span class="line">This is line2</span><br><span class="line">This is line2" | sort | uniq</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结果为：<br>This is line1<br>This is line2<br><code>uniq -c</code> 表示统计形同行的数目</p>
</blockquote>
<p>例子：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "word1 word1 word2 word2 word2" | xargs -n1 | sort | uniq -c</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>一个简单的 wordcount 程序。其中 <code>xargs -n1</code> 用于把每个单词转成一行。</p>
</blockquote>
<p><strong>ATTENTION:</strong> 使用 uniq 之前必须经过 sort, 如果uniq 需要保持原来的顺序, 可以使用<a href="https://stackoverflow.com/a/11532197/5432806" target="_blank" rel="noopener">命令</a><code>awk &#39;!x[$0]++&#39; filename</code>. </p>
<h4 id="文件排序"><a href="#文件排序" class="headerlink" title="文件排序"></a>文件排序</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sort /path/to/file # 对文本行进行字符串排序</span><br><span class="line">sort -k 2 /path/to/file # 按照第2列排序，默认分隔符为' ', '\t'，注意支持单个字符</span><br><span class="line">sort -k 2 -t ';' /path/to/file # 用';'作为分隔符，并按第2列排序</span><br></pre></td></tr></table></figure>
<blockquote>
<p>-g : 按照实数排序，而不是字符串<br>-r : 倒序排列<br>-h : 可以排序以 K, M, G 为单位的数字，只有新版本的 sort 支持这个参数</p>
</blockquote>
<p>例子：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll --color=never | awk '&#123;print $9&#125;' | xargs du -s | sort -k 1 -r -g</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>功能：对当前目录下的所有文件夹从大到小排序<br>–color : 去掉 ll 或 ls 命令的颜色  </p>
</blockquote>
<h4 id="文本替换"><a href="#文本替换" class="headerlink" title="文本替换"></a>文本替换</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed 's/word1/word2/g' /path/to/file # 将文件中所有的 word1 替换成 word2，并将结果打印到终端</span><br><span class="line">sed -i 's/word1/word2/g' /path/to/file # in-place replace</span><br><span class="line">sed -i'.bak' 's/word1/word2/g' /path/to/file # in-place replace and back up original file</span><br></pre></td></tr></table></figure>
<p>例子：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i '/^$/N;/^\n$/D' /path/to/file # 删除多余的空行</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>更多关于 sed 的用法参考：<br><a href="https://www.tecmint.com/linux-sed-command-tips-tricks/" target="_blank" rel="noopener">15 Useful ‘sed’ Command Tips and Tricks</a></p>
</blockquote>
<h4 id="比较两个命令的执行结果有什么不同"><a href="#比较两个命令的执行结果有什么不同" class="headerlink" title="比较两个命令的执行结果有什么不同"></a>比较两个命令的执行结果有什么不同</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff &lt;(command1) &lt;(command2)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>diff 命令只能比较两个文件的不同，所以为了比较两个命令的输出，要把输出转换成一个文件名传递给 diff，这种技术叫做“Process Substitution”，参考：<br><a href="https://askubuntu.com/a/229450/546909" target="_blank" rel="noopener">How do I diff the output of two commands</a><br><a href="http://www.gnu.org/software/bash/manual/bash.html#Process-Substitution" target="_blank" rel="noopener">Process Substitution</a></p>
</blockquote>
<p>例子：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff &lt;(ack "word1" | cut -d ':' -f1 | uniq) &lt;(ack "word2" | cut -d ':' -f1 | uniq) # 比较包含 word1 的文件和包含 word2 的文件有哪些不同</span><br></pre></td></tr></table></figure></p>
<h4 id="查看端口占用情况"><a href="#查看端口占用情况" class="headerlink" title="查看端口占用情况"></a>查看端口占用情况</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo lsof -i:8080</span><br><span class="line">sudo netstat -ap | grep 8080</span><br></pre></td></tr></table></figure>
<h4 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h4><p>rsync 比 scp 更加方便，快速</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 把 src (文件或文件夹) 放在 dest 目录下，即 dest 目录下会多出一个 src 目录</span><br><span class="line">rsync -avz ./src  ./dest</span><br><span class="line"><span class="meta">#</span> src目录下的所有文件同步到dest下，dest下不会产生src文件夹</span><br><span class="line">rsync -avz ./src/  ./dest</span><br><span class="line">rsync -avz ./src  ./dest/</span><br><span class="line"><span class="meta">#</span> 目录完全同步，如果src中的某个文件被删除之后，dest中的也会被删除</span><br><span class="line">rsync --delete  -avz ./src/  ./dest </span><br><span class="line"><span class="meta">#</span> 跳过上传 bin 和 log 目录</span><br><span class="line">rsync -zavP --exclude='bin' --exclude='log'  ./src/ ./dest</span><br><span class="line"><span class="meta">#</span> 远程传输</span><br><span class="line">rsync -vzP username@host:/path/to/src username@host:/path/to/dest</span><br></pre></td></tr></table></figure>
<blockquote>
<p>-a 表示递归上传，并保持所有属性<br>-v表示上传过程中显示上传信息，包括正在上传的文  件，以及总共上传的字节数等<br>-z表示在传输过程中将使用压缩<br>-P表示显示上传进度<br>-u表示更新操作，上传时将跳过修改时间比要上传的文件新的文件   </p>
</blockquote>
<h4 id="ssh-scp-rsync-自动输入密码"><a href="#ssh-scp-rsync-自动输入密码" class="headerlink" title="ssh, scp, rsync 自动输入密码"></a>ssh, scp, rsync 自动输入密码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sshpass -p password ssh username@host</span><br></pre></td></tr></table></figure>
<h4 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 字符串拼接</span><br><span class="line">echo "hello world" | awk '&#123;print "prefix_" $1&#125;' # 输出为 prefix_hello</span><br><span class="line"><span class="meta">#</span> 匹配指定模式的行</span><br><span class="line"><span class="meta">#</span> 下面命令结果为</span><br><span class="line"><span class="meta">#</span> line2.h</span><br><span class="line">printf "line1.cpp\nline2.h\nline3.log" | awk '/2/&#123;print $0&#125;' </span><br><span class="line"><span class="meta">#</span> 下面命令结果为</span><br><span class="line"><span class="meta">#</span> line1.cpp </span><br><span class="line"><span class="meta">#</span> line2.h</span><br><span class="line">printf "line1.cpp\nline2.h\nline3.log" | awk '/(cpp|h)/&#123;print $0&#125;'</span><br><span class="line"><span class="meta">#</span> 不匹配符合条件的行</span><br><span class="line"><span class="meta">#</span> 下面命令结果为</span><br><span class="line"><span class="meta">#</span> line3.log</span><br><span class="line">printf "line1.cpp\nline2.h\nline3.log" | awk '!/(cpp|h)/&#123;print $0&#125;'</span><br></pre></td></tr></table></figure>
<blockquote>
<p>$0 表示整行，$n 表示第 n 行<br><code>&#39;!/(cpp|h)/{print $0}&#39;</code> 中感叹号表示不匹配   </p>
</blockquote>
<h4 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find /path -name "*.c" # 查找后缀为.c 的文件</span><br><span class="line">find /path -name "*.c" -o -name "*.cpp" #同时查找后缀为.c 和 .cpp 的文件</span><br></pre></td></tr></table></figure>
<h4 id="进程监控"><a href="#进程监控" class="headerlink" title="进程监控"></a>进程监控</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pstree -p &lt;pid&gt; # 根据进程号查看线程号</span><br><span class="line">pstree -p `ps -e | grep retrms | cut -d&apos; &apos; -f1` | wc -l # 查看进程 retrms 的线程数</span><br></pre></td></tr></table></figure>
<h4 id="获取文件夹下所有文件列表（递归地）"><a href="#获取文件夹下所有文件列表（递归地）" class="headerlink" title="获取文件夹下所有文件列表（递归地）"></a>获取文件夹下所有文件列表（递归地）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find -L /path/to/directory</span><br><span class="line">tree -if /path/to/directory</span><br></pre></td></tr></table></figure>
<h4 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -r -np ftp://hostname/home/username/directory # 下载文件夹</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux 常用配置]]></title>
      <url>https://irgb.github.io/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/Linux-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h4 id="inputrc-配置"><a href="#inputrc-配置" class="headerlink" title="~/.inputrc 配置"></a><code>~/.inputrc</code> 配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> [Tab auto-completion case-insensitive](https://askubuntu.com/a/87066/546909)</span><br><span class="line">set completion-ignore-case On</span><br><span class="line"><span class="meta">#</span> [prefix sensitive for previous command searching](http://unix.stackexchange.com/a/96511/205808)</span><br><span class="line"><span class="meta">#</span> Press up-arrow for previous matching command</span><br><span class="line">"\e[A":history-search-backward</span><br><span class="line"><span class="meta">#</span> Press down-arrow for next matching command</span><br><span class="line">"\e[B":history-search-forward</span><br></pre></td></tr></table></figure>
<h4 id="bashrc配置"><a href="#bashrc配置" class="headerlink" title="~/.bashrc配置"></a><code>~/.bashrc</code>配置</h4><p>, 在`~/.inputrc 中添加以下配置：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> colorful command line prompt</span><br><span class="line">export PS1="\[\e[37;40m\][\[\e[32;40m\]\u\[\e[33;40m\]@\[\e[32;40m\]\H \[\e[33;40m\]\w\[\e[37;40m \]]\\$ \[\e[37;0m\]"</span><br><span class="line"><span class="meta">#</span> colorful ls result</span><br><span class="line">alias ls='ls --color'</span><br><span class="line"><span class="meta">#</span> increase command listory to 10000 items</span><br><span class="line">HISTFILESIZE=100000</span><br><span class="line">HISTSIZE=100000</span><br><span class="line">export HISTCONTROL=ignoredups:erasedups # no duplicate entries</span><br><span class="line">shopt -s histappend  # append to history, don't overwrite it</span><br><span class="line"><span class="meta">#</span> Save and reload the history after each command finishes</span><br><span class="line">export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考资料：  </p>
<ol>
<li><a href="https://unix.stackexchange.com/a/48113/205808" target="_blank" rel="noopener">Preserve bash history in multiple terminal windows</a></li>
</ol>
</blockquote>
<h4 id="修改-ssh-server-timeout-时间"><a href="#修改-ssh-server-timeout-时间" class="headerlink" title="修改 ssh server timeout 时间"></a>修改 ssh server timeout 时间</h4><p>在 <code>/etc/ssh/sshd_config</code> 中添加:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TCPKeepAlive yes</span><br><span class="line">ClientAliveInterval 120</span><br><span class="line">ClientAliveCountMax 720</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>The first one configures the server to send <code>null packets</code> to clients each 120 seconds and the second one configures the server to close the connection if the client has been inactive for 720 intervals that is <code>720*120 = 86400 seconds = 24 hours</code></p>
</blockquote>
<hr>
<p>或者在客户端的<code>~/.ssh/config</code>中添加配置:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host *</span><br><span class="line">ServerAliveInterval 60</span><br><span class="line">ServerAliveCountMax 3 # 不设置表示不停重试</span><br></pre></td></tr></table></figure></p>
<h4 id="ssh-client-在不同窗口之间共享-session"><a href="#ssh-client-在不同窗口之间共享-session" class="headerlink" title="ssh client 在不同窗口之间共享 session"></a>ssh client 在不同窗口之间共享 session</h4><p>在<code>~/.ssh/config</code>中添加配置:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host *</span><br><span class="line">ControlMaster auto</span><br><span class="line">ControlPersist 1000m</span><br><span class="line">ControlPath ~/.ssh/master-%r@%h:%p</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数字签名, 数字证书, 加密, SSL, HTTPS]]></title>
      <url>https://irgb.github.io/HTTPS_TLS_Certificate/</url>
      <content type="html"><![CDATA[<h1 id="加解密"><a href="#加解密" class="headerlink" title="加解密"></a>加解密</h1><ul>
<li>对称加密算法: DES, 3DES, AES(标准)</li>
<li>非对称加密: RSA, DSA, 分公钥和私钥.<h1 id="摘要算法-Digest"><a href="#摘要算法-Digest" class="headerlink" title="摘要算法(Digest)"></a>摘要算法(Digest)</h1></li>
<li>MD5</li>
<li>SHA1, SHA2(常用)<a href="https://en.wikipedia.org/wiki/Secure_Hash_Algorithm" target="_blank" rel="noopener">参考</a></li>
</ul>
<h1 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h1><p>数字签名用于验证发送方的身份, 并保证数据的完整性.</p>
<ol>
<li>发送方对要传输的数据计算摘要</li>
<li>对摘要用私钥加密, 该密文称为签名</li>
<li>接收方收到数据,用同样的摘要算法计算出摘要1, 并用发送方的公钥解密签名得到摘要2, 如果摘要1 == 摘要2, 说明数据确实来自发送方,并且传输过程中数据没有被篡改.<blockquote>
<p>接收方需要有发送方的公钥, 公钥是通过数字证书获得的.<br><a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html" target="_blank" rel="noopener">图文参考</a></p>
</blockquote>
</li>
</ol>
<h1 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h1><p>数字证书由证书颁发机构(CA, certificate authority)颁发,可以用于确认证书持有者的身份和分发公钥.<br>数字证书中包含的内容:</p>
<ul>
<li>Subject Name: 证书持有人的信息,国家,地点,域名等</li>
<li>Issuer Name: 证书颁发机构信息</li>
<li>Public Key: 证书持有人的公钥</li>
<li>Signature algorithm : 采用的摘要算法</li>
<li>Valid before/after: 证书有效时间</li>
<li>FingerPrints: 证书的签名, 由颁发机构用自己的私钥加密, 用颁发机构的公钥可以解密签名获得证书的摘要, 如果这个摘要与用户计算出的摘要一致,那么这个证书就是可以信任的.</li>
</ul>
<h1 id="根证书-root-certificate"><a href="#根证书-root-certificate" class="headerlink" title="根证书(root certificate):"></a>根证书(root certificate):</h1><p>证书颁发机构给自己颁发的证书, 内含该机构的公钥, 是信任链的起点. 用户可以使用公钥去验证该机构颁发的其他证书. 根证书通常由操作系统预装.</p>
<h1 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h1><p>SSL: Secure Sockets Layer, 是介于HTTP和TCP之间的一个可选层. 是一套由非对称加密, 对称加密, 摘要算法构成的加密传输协议. client像server所要公钥并验证, 通信双方协商一个对称加密密钥, 然后双方采用对称加密算法进行加密通信.</p>
<h3 id="握手过程"><a href="#握手过程" class="headerlink" title="握手过程:"></a>握手过程:</h3><p>握手就是互相验证,并协商密钥的过程, 如图.<br><img src="https://i.imgsafe.org/8e54710257.png" alt="握手过程"></p>
<p><strong>交互流程图</strong>:</p>
<p><img src="https://i.imgsafe.org/8e58a55806.png" alt="握手过程"><br><a href="https://www.ibm.com/support/knowledgecenter/SSFKSJ_7.1.0/com.ibm.mq.doc/sy10660_.htm" target="_blank" rel="noopener"><em>图片来源</em></a></p>
<p><strong>WireShark抓包结果</strong>:</p>
<p><img src="https://i.imgsafe.org/8e5bd5fe66.png" alt="握手过程"></p>
<ul>
<li><p>client发送</p>
<ul>
<li><p><strong>ClientHello</strong>,数据结构:</p>
<pre><code>struct {
    ProtocolVersion client_version;// client支持的协议版本,SSL2.0, SSL3.0, SSL3.1 ie TLS1.0,TLS2.0等
    Random random;//32 bytes(4 bytes timestamp + 28 random bytes),用于生成对称密钥
    SessionID session_id;//the client may decide to reuse previously established session.
    CipherSuite cipher_suites&lt;2..2^16-1&gt;;//client可用的加密组合, 如TLS_RSA_WITH_3DES_EDE_CBC_SHA, TLS_RSA_WITH_DES_CBC_SHA
    CompressionMethod compression_methods&lt;1..2^8-1&gt;;//client支持的压缩算法, deflate, gzip等
    Extension extensions&lt;0..2^16-1&gt;;
} ClientHello;
</code></pre></li>
</ul>
</li>
<li><p>server收到请求, 发送</p>
<ul>
<li><p><strong>ServerHello</strong>,数据结构:</p>
<pre><code>struct {
   ProtocolVersion server_version;//
   Random random;//与ClientHello.random一样,但两者必须不同
   SessionID session_id;
   CipherSuite cipher_suite;//Server从ClientHello中选择出的一个cipher suite
   CompressionMethod compression_method;//Server从ClientHello中选择出的一个压缩算法
} ServerHello;
</code></pre></li>
<li><strong>Server Certificate</strong>, 即server的数字证书,其中包含了server的公钥, client将用这个公钥验证server, 并用于下一步中加密premaster secret.</li>
<li><strong>Server Key Exchange</strong>,可选的,client可用来加密下一步中的Client Key Exchange,只有当证书中不包含公钥的时候才需要.如Diffie Hellman密钥交换算法.通常使用RSA公钥算法的时候不需要提供.<a href="https://en.wikipedia.org/wiki/Key_exchange#Public_key_infrastructure" target="_blank" rel="noopener">key-exchange-参考1</a>,<a href="https://technet.microsoft.com/en-us/library/cc962035.aspx" target="_blank" rel="noopener">key-exchange-参考2</a></li>
<li><strong>Client Certificate Request</strong>,可选的,通常的站点不需要验证用户的身份,如google;但银行站点需要验证,如U盾中就包含了client证书,通信过程需要客户与银行互相验证.</li>
<li><strong>Server Hello Done</strong>,抓包结果中并没有这个</li>
</ul>
</li>
<li><p>client获得server证书之后, 验证证书的合法性. 如果证书受信任，浏览器栏里面会显示一个小锁头，否则会给出证书不受信的提示。如果证书受信任，或者是用户接受了不受信的证书，client会再生成一串随机数(用于生成对称密钥, <strong>第三个随机数称为pre-master key</strong>)，计算摘要,并一起用证书中提供的公钥加密,发送给server:</p>
<ul>
<li><strong>Client Certificate</strong>, 可选的,只有收到了server的Client Certificate Request消息后才发送</li>
<li><strong>Certificate Verify</strong>. 在client发送Client Certificate之后发送,发送了一段数据和签名,用于server验证client是否拥有正确的私钥.</li>
<li><strong>Client Key Exchange</strong>, client利用已有的随机数生成一个premaster secret, 用server的公钥加密后发送给server.双方都在本地计算master key,而不是通过网络传输.</li>
<li><strong>Change Cipher Spec</strong>.通知server,Client Finish之后的所有消息都使用刚刚协商好的密钥加密.</li>
<li><strong>Client Finished</strong>. client计算整个会话的摘要, 然后用协商好的密钥加密之后发送给server,这是第一条用协商密钥加密的消息.</li>
</ul>
</li>
<li><p>server接收client发来的数据之后,用自己的私钥将信息解密,取出随机数,并验证摘要是否一致。server利用前面得到的<strong>三个随机数</strong>生成对称密钥(协商密钥).然后向client发送通知:</p>
<ul>
<li><strong>Change Cipher Spec</strong>. 通知client, server将用协商的密钥加密之后的消息.</li>
<li><strong>Server Finished</strong>. server计算整个会话的摘要,用协商密钥加密之后发给client,如果client能解密,并且摘要通过验证,那么握手过程就建立好了.</li>
</ul>
</li>
</ul>
<blockquote>
<p>握手过程中如果有任何错误，都会断开连接.</p>
</blockquote>
<p>参考:</p>
<blockquote>
<p><a href="https://technet.microsoft.com/en-us/library/cc785811(v=ws.10).aspx" target="_blank" rel="noopener">https://technet.microsoft.com/en-us/library/cc785811(v=ws.10).aspx</a><br><a href="http://www.cisco.com/c/en/us/support/docs/security-vpn/secure-socket-layer-ssl/116181-technote-product-00.html" target="_blank" rel="noopener">http://www.cisco.com/c/en/us/support/docs/security-vpn/secure-socket-layer-ssl/116181-technote-product-00.html</a><br><a href="http://tools.ietf.org/html/rfc2246#page-31" target="_blank" rel="noopener">http://tools.ietf.org/html/rfc2246#page-31</a><br><a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html</a><br><a href="http://www.infoq.com/cn/articles/HTTPS-Connection-Jeff-Moser" target="_blank" rel="noopener">http://www.infoq.com/cn/articles/HTTPS-Connection-Jeff-Moser</a><br>ssl握手过程抓包工具wireshark</p>
</blockquote>
<h1 id="TLS-Transport-Layer-Security"><a href="#TLS-Transport-Layer-Security" class="headerlink" title="TLS (Transport Layer Security)"></a>TLS (Transport Layer Security)</h1><p>TLS来源于SSL, 从SSL3.1开始改名为TLS1.0, 所以经常会说SSL/TLS. </p>
<blockquote>
<p>TLS与SSL的区别与联系:<br><a href="http://security.stackexchange.com/questions/5126/whats-the-difference-between-ssl-tls-and-https" target="_blank" rel="noopener">http://security.stackexchange.com/questions/5126/whats-the-difference-between-ssl-tls-and-https</a><br><a href="https://luxsci.com/blog/ssl-versus-tls-whats-the-difference.html" target="_blank" rel="noopener">https://luxsci.com/blog/ssl-versus-tls-whats-the-difference.html</a></p>
</blockquote>
<h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><p>HTPPS = TCP + SSL/TLS. </p>
]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TLS </tag>
            
            <tag> HTTPS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Genetic Algorithm Hello World]]></title>
      <url>https://irgb.github.io/genetic_algorithm/</url>
      <content type="html"><![CDATA[<p><a href="http://www.puremango.co.uk/2010/12/genetic-algorithm-for-hello-world/" target="_blank" rel="noopener">Genetic Algorithm For Hello World</a> is really a great article to understand genetic algorithm. Here is python implementation.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> editdistance</span><br><span class="line"><span class="keyword">from</span> array <span class="keyword">import</span> array</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">gene_library = string.printable <span class="comment"># 基因库，每个字符是一个基因</span></span><br><span class="line"></span><br><span class="line">target = <span class="string">"Hello, world!"</span> <span class="comment"># 目标字符串</span></span><br><span class="line">n = <span class="number">400</span> <span class="comment"># 初始种群数量</span></span><br><span class="line">mutation_rate = <span class="number">0.0005</span> <span class="comment"># 突变率，会影响收敛速度</span></span><br><span class="line">reproduction_rate = <span class="number">2</span> <span class="comment"># 繁殖速度</span></span><br><span class="line">max_generation = <span class="number">5000</span> <span class="comment"># 最大进化次数</span></span><br><span class="line">threshold = <span class="number">0.2</span> <span class="comment"># 当 target 在种群中的比例超过 threshold 时结束</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_string</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">'''生成一个长度为 n 的字符串，即一个个体的基因'''</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(random.choice(gene_library) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">similarity</span><span class="params">(p1, p2)</span>:</span></span><br><span class="line">    <span class="string">'''计算两个个体的相似度，通常p2=target，相似度计算方法对收敛速度影响很大。相似度要介于[0, 1]之间'''</span></span><br><span class="line">    <span class="keyword">from</span> difflib <span class="keyword">import</span> SequenceMatcher</span><br><span class="line"><span class="comment">#     sim = SequenceMatcher(None, p1, p2).ratio() # 基于相同字符数</span></span><br><span class="line">    sim =  <span class="number">1.0</span>/(editdistance.eval(p1, p2)+<span class="number">1</span>) <span class="comment"># 基于编辑距离</span></span><br><span class="line">    <span class="keyword">return</span> sim</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mating</span><span class="params">(str1, str2)</span>:</span></span><br><span class="line">    <span class="string">'''交配， 产生一个后代'''</span></span><br><span class="line">    <span class="keyword">assert</span>(len(str1) == len(str2))</span><br><span class="line">    idx = range(len(str1))</span><br><span class="line">    random.shuffle(idx)</span><br><span class="line">    chars = array(<span class="string">'c'</span>, <span class="string">' '</span>* len(str1))</span><br><span class="line">    pos = len(idx)/<span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> idx[:pos]:</span><br><span class="line">        chars[i] = str1[i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> idx[pos:]:</span><br><span class="line">        chars[i] = str2[i]</span><br><span class="line">    <span class="keyword">return</span> chars.tostring()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mutation</span><span class="params">(gene)</span>:</span></span><br><span class="line">    <span class="string">'''基因突变，以一定的概率随机改变每一个基因'''</span></span><br><span class="line">    chars = array(<span class="string">'c'</span>, gene)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(gene)):</span><br><span class="line">        prob = random.random()</span><br><span class="line">        <span class="keyword">if</span> prob &lt; mutation_rate:</span><br><span class="line">            chars[i] = random.choice(gene_library)</span><br><span class="line">    <span class="keyword">return</span> chars.tostring()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_element</span><span class="params">(elements)</span>:</span></span><br><span class="line">    <span class="string">'''从 elements 随机选择一个，用于随机交配'''</span></span><br><span class="line">    <span class="keyword">assert</span> isinstance(elements, list)</span><br><span class="line">    <span class="keyword">return</span> elements[random.randint(<span class="number">0</span>, len(elements)<span class="number">-1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reach_threshold</span><span class="params">(population)</span>:</span></span><br><span class="line">    <span class="string">'''population 的类型是 list&lt;tuple&lt;candidate, similarity&gt;&gt;'''</span></span><br><span class="line">    <span class="keyword">return</span> len([tup <span class="keyword">for</span> tup <span class="keyword">in</span> population <span class="keyword">if</span> tup[<span class="number">1</span>] == <span class="number">1.0</span>]) * <span class="number">1.0</span> / len(population) &gt;= threshold</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(population)</span>:</span></span><br><span class="line">    <span class="string">'''进化 generation 次，每次进化都淘汰最不相似的样本，保留最相似样本'''</span></span><br><span class="line">    best_similarity = []</span><br><span class="line">    avg_similarity = []</span><br><span class="line">    worst_similarity = []</span><br><span class="line"></span><br><span class="line">    population = [(candidate, similarity(candidate, target)) <span class="keyword">for</span> candidate <span class="keyword">in</span> population]</span><br><span class="line">    population.sort(key=<span class="keyword">lambda</span> tup:tup[<span class="number">1</span>], reverse=<span class="keyword">True</span>)</span><br><span class="line">    generation = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    best_similarity.append(population[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">    avg_similarity.append(sum([tup[<span class="number">1</span>] <span class="keyword">for</span> tup <span class="keyword">in</span> population]) * <span class="number">1.0</span> / len(population))</span><br><span class="line">    worst_similarity.append(population[<span class="number">-1</span>][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> reach_threshold(population):</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"reach threshold in %d generation."</span> % generation</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> generation &gt; max_generation:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'max_generation reached.'</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        new_population = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(int(reproduction_rate * n)):</span><br><span class="line">            child = mutation(mating(random_element(population)[<span class="number">0</span>], random_element(population)[<span class="number">0</span>]))</span><br><span class="line">            new_population.append((child, similarity(child, target)))</span><br><span class="line">        new_population.sort(key=<span class="keyword">lambda</span> tup:tup[<span class="number">1</span>], reverse=<span class="keyword">True</span>)</span><br><span class="line">        population = new_population[:n]</span><br><span class="line">        generation += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        best_similarity.append(population[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">        avg_similarity.append(sum([tup[<span class="number">1</span>] <span class="keyword">for</span> tup <span class="keyword">in</span> population]) * <span class="number">1.0</span> / len(population))</span><br><span class="line">        worst_similarity.append(population[<span class="number">-1</span>][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    population = [tup[<span class="number">0</span>] <span class="keyword">for</span> tup <span class="keyword">in</span> population]</span><br><span class="line">    <span class="keyword">return</span> population, generation, (best_similarity, avg_similarity, worst_similarity)</span><br><span class="line"></span><br><span class="line">population = [random_string(len(target)) <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n)] <span class="comment"># 初始种群</span></span><br><span class="line">result, generation, statistics = main(population)</span><br><span class="line"></span><br><span class="line">X = range(generation+<span class="number">1</span>)</span><br><span class="line">plt.plot(X, statistics[<span class="number">0</span>], color=<span class="string">"blue"</span>, label=<span class="string">'best similarity'</span>)</span><br><span class="line">plt.plot(X, statistics[<span class="number">1</span>], color=<span class="string">"green"</span>, label=<span class="string">'avg similarity'</span>)</span><br><span class="line">plt.plot(X, statistics[<span class="number">2</span>], color=<span class="string">"red"</span>, label=<span class="string">'worst similarity'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'upper left'</span>, frameon=<span class="keyword">False</span>)</span><br><span class="line">plt.xlabel(<span class="string">'generation'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'similarity'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="keyword">print</span> result[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> result[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>
<p>After the algorithm finished, we can get result below:<br><img src="https://i.imgsafe.org/c1299baaa1.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> genetic </tag>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Quick Sort C++ Implementation]]></title>
      <url>https://irgb.github.io/quick_sort/</url>
      <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> * arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> * arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = arr[r];</span><br><span class="line">    <span class="keyword">int</span> i = l;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=l;j&lt;r;++j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j]&lt;tmp) swap(arr, i++, j);</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, i, r);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> * arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> p = partition(arr, l, r);</span><br><span class="line">    quick_sort(arr, l, p<span class="number">-1</span>);</span><br><span class="line">    quick_sort(arr, p+<span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> * arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;v) arr[len++] = v;</span><br><span class="line">    quick_sort(arr, <span class="number">0</span>, len<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;len;++i) <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sort </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Heap Sort C++ Implementation]]></title>
      <url>https://irgb.github.io/heap_sort/</url>
      <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> * arr, <span class="keyword">int</span> i , <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maxHeapify</span><span class="params">(<span class="keyword">int</span> * arr, <span class="keyword">int</span> len, <span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span> || i&gt;=len) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> larger = i;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">2</span> * i +<span class="number">1</span>, r = <span class="number">2</span> * i +<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(l &lt; len &amp;&amp; arr[l] &gt; arr[larger]) larger = l;</span><br><span class="line">        <span class="keyword">if</span>(r&lt;len &amp;&amp; arr[r] &gt; arr[larger]) larger = r;</span><br><span class="line">        <span class="keyword">if</span>(i == larger) <span class="keyword">break</span>;</span><br><span class="line">        swap(arr, i, larger);</span><br><span class="line">        i = larger;</span><br><span class="line">    &#125;<span class="keyword">while</span>(i&lt;len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildHeap</span><span class="params">(<span class="keyword">int</span> * arr, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len/<span class="number">2</span><span class="number">-1</span>;i &gt;= <span class="number">0</span>;--i)&#123;</span><br><span class="line">        maxHeapify(arr, len, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span> * arr, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    buildHeap(arr, len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len<span class="number">-1</span>;i&gt;<span class="number">0</span>;--i)&#123;</span><br><span class="line">        swap(arr, <span class="number">0</span>, i);</span><br><span class="line">        maxHeapify(arr, i, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> * arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;v) arr[len++] = v;</span><br><span class="line">    heapSort(arr, len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;len;++i) <span class="built_in">cout</span>&lt;&lt;arr[i]&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> heap </tag>
            
            <tag> sort </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[集成 Hexo, Github Pages, Travis 搭建个人博客]]></title>
      <url>https://irgb.github.io/Hexo-Github_Pages-Travis/</url>
      <content type="html"><![CDATA[<p>Reference 很详细地说明了安装、配置 Github Pages，Hexo，Travis 的方法。这里主要分享一下我的方法。<br><a href="https://github.com/irgb/irgb.github.io" target="_blank" rel="noopener">https://github.com/irgb/irgb.github.io</a> 中包含3个分支：</p>
<ul>
<li>master: 包含Hexo生成的静态文件。Github Pages 就是以这个分支创建网站。</li>
<li>source: 源码分支. push 这个分支会触发 Travis 进行构建.</li>
<li>hexo-skeleton: hexo 项目文件夹,因为其中包含了一些个性化的修改,所以也保存起来.push 这个分支也会触发 Travis 进行构建.</li>
</ul>
<p>重要的是 ‘.travis.yml’ 文件:</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">source</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">hexo-skeleton</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">fetch</span> <span class="string">origin</span> <span class="attr">source:source</span> <span class="comment"># 先 fetch source 分支</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">checkout</span> <span class="string">source</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">tar</span> <span class="string">zcvf</span> <span class="string">./source.tar.gz</span> <span class="string">./*</span> <span class="comment"># 创建 source 文件夹</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">mkdir</span> <span class="string">source</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">tar</span> <span class="string">zxvf</span> <span class="string">source.tar.gz</span> <span class="bullet">-C</span> <span class="string">./source</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">rm</span> <span class="string">source.tar.gz</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">fetch</span> <span class="string">origin</span> <span class="attr">hexo-skeleton:hexo-skeleton</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">checkout</span> <span class="string">hexo-skeleton</span> <span class="comment"># 获取 hexo-skeleton 分支, 刚才生成的 source 文件夹仍然存在.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">install</span> <span class="comment"># 根据 hexo-skeleton 分支下的 package.json 安装需要的依赖</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">hexo</span> <span class="string">cl</span> <span class="comment"># 调用 hexo 对 source 文件夹进行编译, 生成网站静态文件.</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">cd</span> <span class="string">public</span> <span class="comment"># Public 文件夹包含了生成的静态文件.</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">init</span> <span class="comment"># 接下来的操作就是将 Public 下的文件提交到 master 分支上.</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">"linjapyc"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">"linjapyc@gmail.com"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">remote</span> <span class="string">add</span> <span class="string">origin</span> <span class="attr">https://$&#123;GH_TOKEN&#125;@github.com/irgb/irgb.github.io.git</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">commit</span> <span class="bullet">-am</span> <span class="string">"`date +'%Y-%m-%d %H:%M:%S %z'`"</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">git</span> <span class="string">push</span> <span class="bullet">-f</span> <span class="string">origin</span> <span class="attr">master:master</span></span><br></pre></td></tr></table></figure>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul>
<li><a href="http://fionat.github.io/2016/04/02/sitemap/" target="_blank" rel="noopener">｜Hexo优化｜如何向google提交sitemap</a></li>
<li><a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="noopener">大道至简——Hexo简洁主题推荐</a></li>
<li><a href="http://codingpub.github.io/2016/04/10/%E5%AE%9A%E5%88%B6Hexo-maupassant/" target="_blank" rel="noopener">定制Hexo - maupassant</a></li>
<li><a href="http://blog.csdn.net/u010053344/article/details/50701191" target="_blank" rel="noopener">Github 搭建 hexo （四）——更换主题，disqus，RSS</a><br>-<a href="http://www.jianshu.com/p/5e74046e7a0f" target="_blank" rel="noopener">使用 Travis CI 自动部署 Hexo</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> tool </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> travis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[约瑟夫环 (圆圈中的最后一个1)]]></title>
      <url>https://irgb.github.io/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%20(%E5%9C%86%E5%9C%88%E4%B8%AD%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA1)/</url>
      <content type="html"><![CDATA[<p>n个数字（0,1,…,n-1）形成一个圆圈，从数字0开始，每次从这个圆圈中删除第m个数字（第一个为当前数字本身，第二个为当前数字的下一个数字）。当一个数字删除后，从被删除数字的下一个继续删除第m个数字。求出在这个圆圈中剩下的最后一个数字。<br><a id="more"></a></p>
<h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution-1:"></a>Solution-1:</h2><p>模拟.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public int Josephus(int n, int m) &#123;</span><br><span class="line">    boolean [] childs = new boolean[n];</span><br><span class="line">    int i = 0, step = 0, cnt = n;</span><br><span class="line">    while(cnt&gt;0)&#123;</span><br><span class="line">        if(!childs[i]) &#123;</span><br><span class="line">            ++step;</span><br><span class="line">            if(step % m == 0)&#123;</span><br><span class="line">                childs[i] = true;</span><br><span class="line">                --cnt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        i = (i+1) % n;</span><br><span class="line">    &#125;</span><br><span class="line">    return i == 0? n-1: i-1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution-2:"></a>Solution-2:</h2><p>找规律.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 递归</span><br><span class="line">public int Josephus(int n, int m) &#123;</span><br><span class="line">    if(n == 0) return -1;</span><br><span class="line">    if(n == 1) return 0;</span><br><span class="line">    else return (Josephus(n-1, m) + m) % n;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 迭代</span><br><span class="line">public int Josephus(int n, int m) &#123;</span><br><span class="line">    if(n == 0) return -1;</span><br><span class="line">    int last = 0;</span><br><span class="line">    for(int i= 2;i&lt;=n;++i)&#123;</span><br><span class="line">        last = (last + m) % i;</span><br><span class="line">    &#125;</span><br><span class="line">    return last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Solution-2规定f(n=0)返回-1, 这个是题目自身规定的, 表示没有元素要删除. 如果 n&gt;0, 那么只需要f(n=1)这一个边界就可以了. f(n=0)无论取值多少, 都能得到 f(n=1) = 0, 因为 f(n=1) = (f(n=0) + k) % 1, 任何数对1取模都等于0.</p>
</blockquote>
<h2 id="公式含义"><a href="#公式含义" class="headerlink" title="公式含义"></a>公式含义</h2><p>题目本身并不重要, 重要的是要理解递归公式的含义.<br><img src="/images/1474776210329_3.png" alt=""><br>对于上图中的<strong>环形数组</strong>, 有两个指针i 和 j, 两个指针的起始位置不同, j 比 i 滞后了5个位置(或者说 i 比 j 滞后了7个位置), 因为是环形的, 所以可以从 j 推导出 i. <code>i = (j +5) % 12</code> 或者 <code>j = (i+7) % 12</code>.理解了环形数组的索引官话规律, 就能很容易理解约瑟夫问题中的递推公式了.</p>
<p>#变式-1: <a href="http://poj.org/problem?id=3750" target="_blank" rel="noopener">小孩报数问题</a><br><strong>Description</strong></p>
<p>有N个小孩围成一圈，给他们从1开始依次编号，现指定从第W个开始报数，报到第S个时，该小孩出列，然后从下一个小孩开始报数，仍是报到S个出列，如此重复下去，直到所有的小孩都出列（总人数不足S个时将循环报数），求小孩出列的顺序。<br><strong>Input</strong></p>
<p>第一行输入小孩的人数N（N&lt;=64）<br>接下来每行输入一个小孩的名字(人名不超过15个字符)<br>最后一行输入W,S (W &lt; N)，用逗号”,”间隔<br><strong>Output</strong></p>
<p>按人名输出小孩按顺序出列的顺序，每行输出一个人名<br><strong>Sample Input</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">Xiaoming</span><br><span class="line">Xiaohua</span><br><span class="line">Xiaowang</span><br><span class="line">Zhangsan</span><br><span class="line">Lisi</span><br><span class="line">2,3</span><br></pre></td></tr></table></figure></p>
<p><strong>Sample Output</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Zhangsan</span><br><span class="line">Xiaohua</span><br><span class="line">Xiaoming</span><br><span class="line">Xiaowang</span><br><span class="line">Lisi</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a><a href="http://poj.org/showsource?solution_id=16120886" target="_blank" rel="noopener">Solution</a>:</h2><p>递归方法只能计算出最后一个出列小孩的位置, 但本题要求计算出出列的顺序, 很难应用递归, 只能采用模拟了.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));//this is faster than new Scanner(System.in)</span><br><span class="line">    public static PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));</span><br><span class="line"></span><br><span class="line">    static String[] names = new String[64];</span><br><span class="line">    static int N, W, S;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        N = in.nextInt();</span><br><span class="line">        for (int i = 0; i &lt; N; ++i) names[i] = in.next();</span><br><span class="line"></span><br><span class="line">        String[] W_S = in.next().split(&quot;,&quot;);</span><br><span class="line"></span><br><span class="line">        W = Integer.valueOf(W_S[0]);</span><br><span class="line">        S = Integer.valueOf(W_S[1]);</span><br><span class="line">        // 下面的过程就是经典的约瑟夫环模拟解法.</span><br><span class="line">        boolean[] found = new boolean[N];</span><br><span class="line">        int step = 0, cnt = 0, idx = W - 1;</span><br><span class="line">        while (cnt &lt; N) &#123;</span><br><span class="line">            if(!found[idx])&#123;</span><br><span class="line">                ++step;</span><br><span class="line">                if (step % S == 0) &#123;</span><br><span class="line">                    found[idx] = true;</span><br><span class="line">                    out.println(names[idx]);// 找到一个小孩</span><br><span class="line">                    ++cnt;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            idx = (idx + 1) % N;</span><br><span class="line">        &#125;</span><br><span class="line">        out.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Longest Increasing Subsequence]]></title>
      <url>https://irgb.github.io/Longest-Increasing-Subsequence/</url>
      <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem:"></a><a href="https://leetcode.com/problems/longest-increasing-subsequence/" target="_blank" rel="noopener">Problem</a>:</h2><p>Given an unsorted array of integers, find the length of longest increasing subsequence.</p>
<p>For example,<br>Given <code>[10, 9, 2, 5, 3, 7, 101, 18]</code>,<br>The longest increasing subsequence is <code>[2, 3, 7, 101]</code>, therefore the length is <code>4</code>. Note that there may be more than one LIS combination, it is only necessary for you to return the length.</p>
<p>Your algorithm should run in O(n2) complexity.</p>
<p>Follow up: Could you improve it to O(n log n) time complexity?</p>
<p>即从一个无序数组中找出最长的递增子序列的长度.</p>
<h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution-1:"></a>Solution-1:</h2><p>常规的DP.时间复杂度O(n^2)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> [] len = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        len[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;nums.length;++i)&#123;</span><br><span class="line">            len[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i-<span class="number">1</span>;j&gt;=<span class="number">0</span>;--j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] &gt; nums[j]) len[i] = Math.max(len[i], len[j] +<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            max = Math.max(max, len[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution-2:"></a><a href="https://leetcode.com/submissions/detail/68685864/" target="_blank" rel="noopener">Solution-2</a>:</h2><p>O(nlogn).很精妙(<strong>推荐</strong>),但很难理解.<a href="http://www.geeksforgeeks.org/longest-monotonically-increasing-subsequence-size-n-log-n/" target="_blank" rel="noopener">参考1</a>, <a href="https://discuss.leetcode.com/topic/28738/java-python-binary-search-o-nlogn-time-with-explanation" target="_blank" rel="noopener">参考2</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> nums.length;</span><br><span class="line">        <span class="keyword">int</span> [] tails = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.length;++i)&#123;</span><br><span class="line">            <span class="keyword">int</span> l = <span class="number">0</span>, r = size;<span class="comment">//在[0,size]之间搜索</span></span><br><span class="line">            <span class="keyword">while</span>(l&lt;r)&#123;<span class="comment">//其实就是在 tails 数组中找 nums[i]的 lower_bound</span></span><br><span class="line">                <span class="keyword">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(tails[mid] &gt; nums[i]) r = mid;</span><br><span class="line">                <span class="keyword">if</span>(tails[mid] &lt; nums[i]) l = mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> r = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l==size) ++size;<span class="comment">//如果tails中所有的元素都小于nums[i], 此时l==size</span></span><br><span class="line">            tails[l] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h2><ul>
<li><a href="http://leanote.com/blog/post/579970e4ab644135ea027c92" target="_blank" rel="noopener">lower_bound upper_bound binary_search的最佳写法</a></li>
<li>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> coding </category>
            
        </categories>
        
        
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
